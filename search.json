[{"path":"https://gaynorr.github.io/AlphaSimR/articles/AlphaSimR.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"AlphaSimR","text":"Explain package Point important pages information (introduction) Include links external sources","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/DataImport.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Data Import","text":"Pull example script","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/Genome.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Genome","text":"Introduction Pull MOOC Explain genome representation Haplotypes / genotypes QTL/SNP Genetic map vs physical map","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/GenomicSelection.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Genomic Selection","text":"Introduction Point genome (QTL/SNP) trait build training population Mention fixed effect fit model get GEBVs Accuracy selection (vs BV GV, train vs pred) selections Explain models Use Guilherme’s paper Explain 1 vs 2 use external software","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/Meiosis.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Meiosis","text":"Introduction Pull MOOC Explain genome representation Recombination / meiosis Stages meiosis Chromosome pairing Chiasma (crossovers) Crossover interference Segregation Diploids first polyploids Centromeres polyploids Implementation Gamma sprinkling model Crossover interference recHist pedigree Sex specific recombination rates","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/Misc.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Misc","text":"Introduction Explain individual level slot set/get Explain population slot Finalize pop?","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/QuantGen.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Quantitative Genetics","text":"Introduction Point vignette traits first step History Fisher (response selection, variance components) Bulmer (genic variance) Decomposition genetic values Reference population (HWE vs non-HWE) Breeding value Dominance deviations Epistatic deviations Variance, genic variance, LD covariance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/Traits.html","id":"placeholder-for-future-development","dir":"Articles","previous_headings":"","what":"Placeholder for future development","title":"Traits","text":"Background existing vignette altAddTraitAD (section?) Practical examples get effects Manual adjustments importation Mixture distributions rescaleTrait","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"example-breeding-program","dir":"Articles","previous_headings":"","what":"Example Breeding Program","title":"Introduction to AlphaSimR","text":"simplified animal breeding program modeling 20 discrete generations selection. generation consists 1000 animals, 500 male 500 female. generation, best 25 males selected basis genetic value single polygenic trait mated females produce 1000 replacement animals. quantitative trait selection modeled controlled 10,000 QTL. QTL equally split across 10 chromosome groups 1,000 QTL per chromosome. mean genetic value individuals generation recorded construct plot genetic gain per generation.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"creating-founder-haplotypes","dir":"Articles","previous_headings":"","what":"Creating Founder Haplotypes","title":"Introduction to AlphaSimR","text":"first step simulation creating set founder haplotypes. founder haplotypes used form genome genotypes animals first generation. genotypes descendants derived haplotypes using simulated mating genetic recombination. simulation, single line code needed create haplotypes, given . code uses quickHaplo function generate initial haplotypes. quickHaplo function generates haplotypes randomly sampling 1s 0s. approach equivalent modeling population linkage Hardy-Weinberg equilibrium allele frequencies 0.5. approach rapid generate realistic haplotypes. makes approach great prototyping code, ill-suited types simulations. preferred choice simulating realistic haplotypes use runMacs function. runMacs function wrapper MaCS software, coalescent simulation program included within distribution AlphaSimR (Chen, Marjoram, Wall 2009). MaCS software used AlphaSimR simulate bi-allelic genome sequences according population demographic history. runMacs function allows user specify one several predefined population histories supply population history. list currently available population histories can found runMacs help document. alternative choice providing realistic initial haplotypes import newMapPop function. function allows user import haplotypes can generated another software package taken directly real marker data.","code":"founderPop = quickHaplo(nInd=1000, nChr=10, segSites=1000)"},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"setting-simulation-parameters","dir":"Articles","previous_headings":"","what":"Setting Simulation Parameters","title":"Introduction to AlphaSimR","text":"second step setting global parameters simulation. can done three lines code. first line initializes object containing simulation parameters. object must initialized founder haplotypes created previous step code given . output function object class SimParam saved name SP. name SP almost always used, many AlphaSimR functions use argument called “simParam” default value NULL. leave value NULL, functions search global environment object called SP use function’s argument. means use SP, won’t need specify value “simParam” argument. next line code defines quantitative trait used selection. mentioned previous section, trait controlled 1000 QTL per chromosome. rest function arguments left defaults, include trait mean zero variance one unit. ‘’ end SP$addTraitA indicates trait’s QTL additive effects. traits AlphaSimR include additive effects. Traits may also include combination three additional types effects: dominance (“D”), epistasis (“E”), genotype--environment (“G”). specific combination trait effects requested using function appropriate letter ending. example, trait additive epistasis effects can requested using SP$addTraitAE. following trait types currently offered: “”, “AD”, “AE”, “AG”, “ADE”, “ADG”, “AEG”, “ADEG”. final line code defines sexes determined simulation. Sex systematically assigned (.e. male, female, male, …). Systematic assignment used ensure always equal numbers males females.","code":"SP = SimParam$new(founderPop) SP$addTraitA(nQtlPerChr=1000) SP$setSexes(\"yes_sys\")"},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"modeling-the-breeding-program","dir":"Articles","previous_headings":"","what":"Modeling the Breeding Program","title":"Introduction to AlphaSimR","text":"now ready start modeling breeding program. begin, need generate initial population animals. step take haplotypes founderPop information SP create object Pop-class. Pop-class object represents population individuals. population important units AlphaSimR, AlphaSimR functions use one populations argument. regard, AlphaSimR can thought modeling discrete populations basic unit. contrasts predecessor, used discrete generations. Populations fixed unit AlphaSimR. Many functions AlphaSimR take population argument, modify population, return modified population. Populations can also used “directly”. example, can pull individuals form new (sub-)populations using [] can merge populations together using c(). functionality particularly useful performing tasks AlphaSimR lacks built-function. However, example breeding program presented easily modeled using built-functions. continuing model breeding program, first think data ’ll need examining results next stage. must expressly request relevant data saved. AlphaSimR designed way increased speed reduced memory usage. example plot generation mean time desired. needed construct plot vector containing mean generation. start vector, mean current generation saved “genMean”. subsequent generation, mean generation added “genMean”. Measuring mean current generation accomplished code . final lines code modeling 20 generations selection mating. AlphaSimR host functions modeling selection mating. example selectCross function used, efficiently combines selection mating single function call. function actually uses two separate function AlphaSimR, selectInd randCross selection mating, respectively. model multiple generations selection, function call placed within loop line code tracking population mean. Using loop makes code easier read avoids needless duplication. loop “pop” overwritten generation. keeps memory usage low keeps code simple. However, user needed retain older populations several alternative approaches adopted. approaches include giving population unique name, storing populations elements list, dynamically growing populations c(). code loop given .","code":"pop = newPop(founderPop) genMean = meanG(pop) for(generation in 1:20){   pop = selectCross(pop=pop, nFemale=500, nMale=25, use=\"gv\", nCrosses=1000)   genMean = c(genMean, meanG(pop)) }"},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"examining-the-results","dir":"Articles","previous_headings":"","what":"Examining the Results","title":"Introduction to AlphaSimR","text":"last step simulation examining results. example one result: vector population means generation. examine result, code produce basic line plot.","code":"plot(0:20, genMean, xlab=\"Generation\", ylab=\"Mean Genetic Value\", type=\"l\")"},{"path":"https://gaynorr.github.io/AlphaSimR/articles/intro.html","id":"full-code","dir":"Articles","previous_headings":"","what":"Full Code","title":"Introduction to AlphaSimR","text":"","code":"library(AlphaSimR) # Creating Founder Haplotypes founderPop = quickHaplo(nInd=1000, nChr=10, segSites=1000)  # Setting Simulation Parameters SP = SimParam$new(founderPop) SP$addTraitA(nQtlPerChr=1000) SP$setSexes(\"yes_sys\")  # Modeling the Breeding Program pop = newPop(founderPop) genMean = meanG(pop) for(generation in 1:20){   pop = selectCross(pop=pop, nFemale=500, nMale=25, use=\"gv\", nCrosses=1000)   genMean = c(genMean, meanG(pop)) }  # Examining the Results plot(0:20, genMean, xlab=\"Generation\", ylab=\"Mean Genetic Value\", type=\"l\")"},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"genotype-dosage-scaling","dir":"Articles","previous_headings":"","what":"Genotype Dosage Scaling","title":"Traits in AlphaSimR","text":"AlphaSimR defines individual’s raw genotype dosage number copies “1” allele locus. Since loci AlphaSimR biallelic alleles “0” “1”, definition raw genotype dosage fully explains individual’s genotype. number copies “0” allele just individual’s ploidy level minus raw genotype dosage. usually rather irrelevant detail, user want model diploid organism whose ploidy level always two. However, AlphaSimR can also used model wide range autopolyploid organisms even allows mixing ploidy levels within simulation. means allowable range raw genotype dosage fixed value software must account fact. AlphaSimR accounts different levels ploidy scaling organism’s genotype dosage accordance ploidy level. primary motivation using scaled dosages unify user inputs. use scaled dosages can also make easier compare simulations different levels ploidy. However, user must use care making comparisons, underlying assumptions used model may valid. use scaled genotype dosages implies individual’s genetic value depends relative ratio alleles independent organism’s ploidy level. traits organisms evidence support assumption least reject , also plenty evidence clearly rejecting assumption traits (Gallais 2003). Thus, direct comparisons possible AlphaSimR always biologically relevant. However, vast majority users won’t running simulation depends assumption, information presented solely purpose understanding functions presented following sections. two types scaled genotype dosages AlphaSimR: additive dominance. explanation given . followed table providing example dosage scaling diploid autotetraploid organisms. scaled additive genotype dosage (xAx_A) shown equation (2). equation linearly scales relative dosage set values opposing homozygotes -1 1. xA=(x−ploidy2)(2ploidy)\\begin{equation} x_A = \\big( x - \\tfrac{ploidy}{2} \\big) \\big( \\tfrac{2}{ploidy} \\big) \\end{equation} scaled dominance genotype dosage (xDx_D) shown equation (3). equation uses non-linear scaling fit value opposing homozygotes 0 middlemost heterozygote 1. middlemost heterozygote genotype equal ratio “0” “1” alleles. diploid organism, scaled dominance genotype dosage matches classic parameterization dominance. autopolyploid organisms, scaled dominance genotype dosage consistent digenic dominance (discussed later). xD=x(ploidy−x)(2ploidy)2\\begin{equation} x_D = x \\big( ploidy - x \\big) \\big( \\tfrac{2}{ploidy} \\big)^2 \\end{equation} Table 1 provides example raw scaled genotype dosages diploid autotetraploid organism. diploid tetraploid columns represent raw genotype dosages respective organisms. additive dominance columns represent corresponding scaled genotype dosages. table shows 0, 1 2 genotypes diploid organism treated equivalent 0, 2 4 genotypes autotetraploid organism.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"additive-effects","dir":"Articles","previous_headings":"","what":"Additive Effects","title":"Traits in AlphaSimR","text":"(x)=∑axA\\begin{equation} (x) = \\sum x_A \\end{equation} function additive effects given equation (4). right-hand side summation QTL product additive effect (aa) scaled additive dosage (xAx_A). equation equivalent parameterizations classic quantitative trait models. unique aspect additive effects AlphaSimR sampling effects. Additive effects sampled two stages. first stage involves sampling initial values similar methods used stochastic simulation software programs. second stage unique. stage involves scaling magnitude initial values achieve desired genetic variance, either total additive genetic variance. first stage sampling additive effects setting initial values effects. Initial values sampled either standard normal distribution gamma distribution. using gamma distribution, user specifies shape parameter scale parameter set 1. deviates sampled gamma distribution randomly assigned either positive negative sign. Random assignment sign results expected distribution symmetric distribution mean 0. second stage scaling magnitude effects achieve user specified genetic variance. user specified genetic variance can either total additive. scaling procedure involves just additive effect, also dominance epistatic effects trait includes effects well. procedure works first calculating variance founder population using initially sampled effects calculating scaling constant applied effects achieve desired variance founder population. scaling constant equals square-root target genetic variance (total additive) divided square-root initial genetic variance (total additive). Note founder population population user uses initialize simulation parameters object. Scaling magnitude effects allows AlphaSimR build simulations trait values matching real-world counterparts. example, user simulating grain yield plant species likely estimates means variances tons per hectare. user can use create simulation values. primary benefit matching values make interpretation simulation results intuitive. significance results apparent user can work scale familiar . also allows user easily identify potential flaws simulation values move outside range biologically acceptable values.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"dominance-effects","dir":"Articles","previous_headings":"","what":"Dominance Effects","title":"Traits in AlphaSimR","text":"D(x)=∑dxD\\begin{equation} D(x) = \\sum d x_D \\end{equation} function dominance effects given equation (5). right-hand side equation summation QTL product dominance effect (dd) scaled dominance dosage (xDx_D). equation equivalent parameterization dominance classic quantitative trait models diploid organisms. additive effects, method sampling dominance effects AlphaSimR requires special attention. Dominance effects calculated AlphaSimR using concept dominance degrees. formula calculation given equation (6). equation shows dominance effect (dd) locus dominance degree (δ\\delta) locus times absolute value additive effect (aa). d=δ||\\begin{equation} d = \\delta \\left| \\right| \\end{equation} rationale behind using dominance degrees intuitive biological interpretation diploid organisms. example, dominance degree 0 represents dominance additive model. dominance degree 1 corresponds complete dominance. Dominance degrees 0 1 correspond partial dominance, values 1 correspond -dominance. Dominance effects, additive effects, sampled two stages. first stage sampling initial values second stage scaling magnitude values. sampling initial effects involves two user supplied parameters, mean variance normal distribution used sample dominance degrees. dominance degrees used conjunction additive effects calculate dominance effects. scaling procedure performed described additive effects section calculate scaling constant. scaling constant directly applied dominance effects. Note scaling changes value dominance effect, change value dominance degree. means specification dominance degree distribution independent requested genetic variance. Dominance effects become complicated discussing polyploid organisms. polyploids additional heterozygous genotypes. example, autotetraploid organism two homozygous genotypes (0 4) three heterozygous genotypes (1, 2 3). additional heterozygous genotype requires additional dominance parameter obtain fully parameterized model. Several different parameterizations used polyploids full discussion parameterizations outside scope document. Interested readers refer Gallais’s textbook details (2003). AlphaSimR include additional term dominance model polyploids, make use fully parameterized model. Instead, AlphaSimR uses digenic dominance model ploidy levels due use scaled dominance genotype dosages. model chosen provides consistency user interface internal coding regardless ploidy level provides reasonable approximation partial dominance highly polygenic traits. unfortunate side effect dominance model polyploids previously described interpretation dominance degrees breaks. Consider single QTL additive effect 1 dominance degree 1. genotypes genetic values example diploid autotetraploid organism given Table 2. diploid organism, heterozygous genotype equivalent best homozygote, dominance degree 1 indicates complete dominance. However, autotetraploid organism three heterozygous genotypes. value middlemost heterozygous genotype equivalent best homozygote, heterozygous genotype highest value. heterozygous genotype highest value better best homozygote, dominance degree 1 actually represents -dominance autotetraploid.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"epistatic-effects","dir":"Articles","previous_headings":"","what":"Epistatic Effects","title":"Traits in AlphaSimR","text":"E(x)=∑exA1xA2\\begin{equation} E(x) = \\sum e x_{A_1} x_{A_2} \\end{equation} function epistatic effects given equation (7). summation right-hand side pairs QTLs, AlphaSimR uses simplified model epistasis restricts epistatic interactions pairs loci. QTL must present one one pair, number pairs equal half number QTL. remaining elements right-hand side equation (7) epistatic effects (ee), scaled additive dosage first locus pair (xA1x_{A_1}) scaled additive dosage second locus pair (xA2x_{A_2}). epistatic model equation (7) somewhat constrained. model allows epistasis pairs loci models additive--additive epistasis. motivation behind using constrained model maintain computational tractability using large numbers QTL. dominance model, model considered reasonable approximation complicated reality. sampling epistatic effects similar sampling additive effects one additional user specified parameter relative ratio additive--additive epistatic variance. relative ratio refers ratio additive--additive epistatic variance additive variance. parameter sets variance epistatic effects. Specifically, variance effects set value expected achieve desired ratio random mating population whose QTL linkage equilibrium allele frequency 0.5. Note populations, including simulated populations, meet assumptions, observed relative ratio additive additive--additive epistatic variance unlikely match requested ratio. observed additive--additive epistatic variance typically smaller, value maximized allele frequency 0.5. Note unselected bi-parental populations derived inbred parents expected allele frequencies 0.5 segregating alleles. Thus, populations ideal estimating reasonable value relative ratio additive--additive epistatic variance.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"genotype-by-environment-effects","dir":"Articles","previous_headings":"","what":"Genotype-by-Environment Effects","title":"Traits in AlphaSimR","text":"G(x,w)=wb(x)\\begin{equation} G(x, w) = w b(x) \\end{equation} b(x)=μG+∑gxA\\begin{equation} b(x) = \\mu_G + \\sum g x_A \\end{equation} function genotype--environment effects given equations (8) (9). right-hand side equation (8) contains two parts: environmental covariate (ww) genotype specific slope (b(x)b(x)). formula genotype specific slope shown equation (9). right-hand side equation includes intercept value (μG\\mu_G) summation QTL product genotype--environment effect (gg) scaled additive dosage (xAx_A). following paragraphs explain equations model genotype--environment interactions. Initially, explanation cover case population genotype--environment interaction variance, environmental variance. explanation parameters equations changed model genotype--environment interaction variance environmental variance given next section. begin, description variables equations sampled needed. much easier understand formulas come together model genotype--environment interactions understood variables represent. environmental covariate (ww) equation (8) represents environmental component genotype--environment interaction. value environmental covariate randomly sampled standard normal distribution. definition, means average value environmental covariate zero variance one. average value environmental covariate considered target environment. Thus, value equation (8) target environment always zero. genotype specific slope equation (9) represents genetic component genotype--environment interaction. astute reader notice equation similar equation additive trait. Indeed, genotype specific slope really just additive trait. term μG\\mu_G serves similar role μ\\mu equation (1) summation right-hand side equation (9) similar function additive effects equation (4). Also like additive trait, effects genotype specific slope scaled achieve specific mean variance founder population. case, mean set zero variance set user specified genotype--environment interaction variance. understand environmental covariate genotype specific slope model genotype--environment interactions helps review properties variables. environmental covariate just random variable mean zero variance one. genotype specific slope also random variable, regards founder population, mean zero variance equal genotype--environment variance. means equation (8) just product two random variables. random variables independent, formula variance product given equation . Var(wb)=E[w]2Var(b)+Var(w)E[b]2+Var(w)Var(b)\\begin{equation} Var(w b) = E[w]^2 Var(b) + Var(w) E[b]^2 + Var(w) Var(b) \\end{equation} Equation (10) gives variance product ww bb equation (8). term Var()Var() indicates variance variable term E[]E[] indicates expectation (mean) variable. founder population, expectations ww bb zero, first two terms right-hand side equation drop . Equation (10) reduces product two variances. variance ww one variance bb equals genotype--environment interaction variance, variance equation (8) equals genotype--environment interaction variance equivalent variance genotype specific slopes. must repeated description limited founder population. important point, mean variance genotype specific slope can different populations since genetic control.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"adding-environmental-variance","dir":"Articles","previous_headings":"Genotype-by-Environment Effects","what":"Adding Environmental Variance","title":"Traits in AlphaSimR","text":"genotype--environment effects model described altered model founder population non-zero environmental variance. equations remain relevant altered model sampling distributions effects equations changed. Specifically, variance environmental covariate set environmental variance (σE2\\sigma_E^2) genotype specific slope set different mean variance. mean genotype specific slope set one variance set genotype--environment interaction variance divided environmental variance (σGE2σE2\\tfrac{\\sigma_{GE}^2}{\\sigma_E^2}). logic behind modifications becomes clear examination equation (10). right-hand side equation (10) contains three terms. first term equals zero, environmental covariate mean zero (.e. E[w]=0E[w] = 0). second term equals environmental variance, mean genotype specific slope equals one variance environmental covariate equals environmental variance (.e. E[b]=1E[b] = 1 Var(w)=σE2Var(w) = \\sigma_E^2). Finally, value last term equals genotype--environment interaction variance (.e. Var(w)Var(b)=σE2σGE2σE2=σGE2Var(w) Var(b) = \\sigma_E^2 \\tfrac{\\sigma_{GE}^2}{\\sigma_E^2} = \\sigma_{GE}^2). examination equation (10) also shows environmental genotype--environment interaction variances populations specific parameters genetic control. example, population higher average genotype specific slope also higher value second term equation (10). population thus higher environmental variance even though environment changed. Likewise, amount genotype--environment interaction variance depends variance genotype specific slope.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"relationship-to-finlay-wilkinson-regression","dir":"Articles","previous_headings":"Genotype-by-Environment Effects","what":"Relationship to Finlay-Wilkinson Regression","title":"Traits in AlphaSimR","text":"AlphaSimR’s model genotype--environment effects effectively biological model Finlay-Wilkinson regression. Finlay-Wilkinson regression classic technique analyzing genotype--environment interactions (Finlay Wilkinson 1963). simplest form, individual’s genotype--environment interaction reduced intercept slope. slope Finlay-Wilkinson regression roughly equivalent genotype specific slope equation (9). intercept Finlay-Wilkinson regression roughly equivalent genetic value individual target environment. Initially, similarity two models intentional. model used AlphaSimR originates model used Gaynor et al. (2017). model treated QTL’s additive effect random variable whose value depended value environmental covariate. model roughly equivalent AlphaSimR’s model founder population zero environmental variance. difference models AlphaSimR scales effects exactly achieve desired variance Gaynor et al. model randomly sampled effects expectation sampled effects equaled desired variance. realized later slight change model, described , introduce specified amount environmental variance modifications result model properties matching measured Finlay-Wilkinson regression.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/articles/traits.html","id":"user-interaction","dir":"Articles","previous_headings":"Genotype-by-Environment Effects","what":"User Interaction","title":"Traits in AlphaSimR","text":"AlphaSimR users directly observe set value environmental covariate. Instead, indirectly set value providing randomly sampled p-value environment. AlphaSimR uses p-value calculate appropriate value ww level environmental variance. Users note p-values follow uniform distribution range zero one, recommended users randomly generate p-values using R’s built-runif function. p-value 0.5 corresponds ww equaling zero equivalent target environment. user supply p-value, AlphaSimR sample one random. Genetic values genetic variances reported AlphaSimR always target environment. Since target environment corresponds ww equaling zero, equation (8) effectively ignored calculations. values phenotypes phenotypic variance ever reflect contribution genotype--environment interaction.","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Gaynor. Author, maintainer. Gregor Gorjanc. Contributor. John Hickey. Contributor. Daniel Money. Contributor. David Wilson. Contributor. Thiago Oliveira. Contributor. Audrey Martin. Contributor. Philip Greenspoon. Contributor.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gaynor RC, Gorjanc G, Hickey JM (2021). “AlphaSimR: R package breeding program simulations.” G3 Gene|Genomes|Genetics, 11(jkaa07). https://doi.org/10.1093/g3journal/jkaa017.","code":"@Article{,   title = {AlphaSimR: an R package for breeding program simulations},   author = {R Chris Gaynor and Gregor Gorjanc and John M Hickey},   journal = {G3 Gene|Genomes|Genetics},   year = {2021},   volume = {11},   number = {jkaa07},   issue = {2},   url = {https://doi.org/10.1093/g3journal/jkaa017}, }"},{"path":"https://gaynorr.github.io/AlphaSimR/index.html","id":"readme","dir":"","previous_headings":"","what":"Breeding Program Simulations","title":"Breeding Program Simulations","text":"successor ‘AlphaSim’ software breeding program simulation (Faux et al., 2016; https://doi.org/10.3835/plantgenome2016.02.0013). Used stochastic simulations breeding programs level DNA sequence every individual. Contained wide range functions modeling common tasks breeding program, selection crossing. functions allow constructing simulations highly complex plant animal breeding programs via scripting R software environment. simulations can used evaluate overall breeding program performance conduct research breeding program design, implementation genomic selection. Included ‘Markovian Coalescent Simulator’ (‘MaCS’) fast simulation biallelic sequences according population demographic history (Chen et al., 2009; https://doi.org/10.1101/gr.083634.108).","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/index.html","id":"publication","dir":"","previous_headings":"","what":"Publication","title":"Breeding Program Simulations","text":"Gaynor, R. Chris, Gregor Gorjanc, John M. Hickey. 2021. AlphaSimR: R package breeding program simulations. G3 Gene|Genomes|Genetics 11(2):jkaa017. https://doi.org/10.1093/g3journal/jkaa017.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/index.html","id":"download","dir":"","previous_headings":"","what":"Download","title":"Breeding Program Simulations","text":"AlphaSimR available CRAN. install use: development version AlphaSimR (potentially unstable) can accessed devel branch GitHub. install use: install vignettes use:","code":"install.packages('AlphaSimR') devtools::install_github(repo=\"gaynorr/AlphaSimR@devel\") devtools::install_github(repo=\"gaynorr/AlphaSimR@devel\", build_vignettes=TRUE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/AlphaSimR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AlphaSimR: Breeding Program Simulations — AlphaSimR-package","title":"AlphaSimR: Breeding Program Simulations — AlphaSimR-package","text":"successor 'AlphaSim' software breeding program simulation [Faux et al. (2016) <doi:10.3835/plantgenome2016.02.0013>]. Used stochastic simulations breeding programs level DNA sequence every individual. Contained wide range functions modeling common tasks breeding program, selection crossing. functions allow constructing simulations highly complex plant animal breeding programs via scripting R software environment. simulations can used evaluate overall breeding program performance conduct research breeding program design, implementation genomic selection. Included 'Markovian Coalescent Simulator' ('MaCS') fast simulation biallelic sequences according population demographic history [Chen et al. (2009) <doi:10.1101/gr.083634.108>]. Please see introductory vignette instructions using package. vignette can viewed using following command: vignette(\"intro\",package=\"AlphaSimR\")","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/AlphaSimR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AlphaSimR: Breeding Program Simulations — AlphaSimR-package","text":"Maintainer: Chris Gaynor gaynor.robert@hotmail.com (ORCID) contributors: Gregor Gorjanc (ORCID) [contributor] John Hickey (ORCID) [contributor] Daniel Money (ORCID) [contributor] David Wilson [contributor] Thiago Oliveira (ORCID) [contributor] Audrey Martin (ORCID) [contributor] Philip Greenspoon (ORCID) [contributor]","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Hybrid population — HybridPop-class","title":"Hybrid population — HybridPop-class","text":"lightweight version Pop-class hybrid lines. Memory saved storing genotypic data.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hybrid population — HybridPop-class","text":"","code":"# S4 method for class 'HybridPop' x[i]  # S4 method for class 'HybridPop' c(x, ...)  isHybridPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hybrid population — HybridPop-class","text":"x 'HybridPop' index individuals ... additional 'HybridPop' objects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Hybrid population — HybridPop-class","text":"[: Extract HybridPop using index id c(HybridPop): Combine multiple HybridPops","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Hybrid population — HybridPop-class","text":"isHybridPop(): Test object HybridPop class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/HybridPop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Hybrid population — HybridPop-class","text":"nInd number individuals id individual's identifier mother identifier individual's mother father identifier individual's father nTraits number traits gv matrix genetic values. using GxE traits, gv reflects gv p=0.5. Dimensions nInd nTraits. pheno matrix phenotypic values. Dimensions nInd nTraits. gxe list containing GxE slopes GxE traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/LociMap-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Loci metadata — LociMap-class","title":"Loci metadata — LociMap-class","text":"used SNPs QTLs","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/LociMap-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Loci metadata — LociMap-class","text":"nLoci total number loci lociPerChr number loci per chromosome lociLoc physical position loci name optional name LociMap object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw population with genetic map — MapPop-class","title":"Raw population with genetic map — MapPop-class","text":"Extends RawPop-class add genetic map. first object created simulation. used creating initial populations setting traits SimParam.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw population with genetic map — MapPop-class","text":"","code":"# S4 method for class 'MapPop' x[i]  # S4 method for class 'MapPop' c(x, ...)  isMapPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw population with genetic map — MapPop-class","text":"x 'MapPop' object index individuals ... additional 'MapPop' objects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Raw population with genetic map — MapPop-class","text":"[: Extract MapPop index c(MapPop): Combine multiple MapPops","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Raw population with genetic map — MapPop-class","text":"isMapPop(): Test object MapPop class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MapPop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Raw population with genetic map — MapPop-class","text":"genMap list chromosome genetic maps centromere vector centromere positions inbred indicates whether individuals fully inbred","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-Population — MultiPop-class","title":"Multi-Population — MultiPop-class","text":"mega-population represents population populations. designed behave like list populations.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Population — MultiPop-class","text":"","code":"# S4 method for class 'MultiPop' x[i]  # S4 method for class 'MultiPop' x[[i]]  # S4 method for class 'MultiPop' c(x, ...)  # S4 method for class 'MultiPop' length(x)  isMultiPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Population — MultiPop-class","text":"x 'MultiPop' object index populations mega-populations ... additional 'MultiPop' 'Pop' objects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Multi-Population — MultiPop-class","text":"[: Extract MultiPop index [[: Extract Pop index c(MultiPop): Combine multiple MultiPops length(MultiPop): Number pops MultiPop","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Multi-Population — MultiPop-class","text":"isMultiPop(): Test object MultiPop class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/MultiPop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Multi-Population — MultiPop-class","text":"pops list Pop-class /MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw population with genetic map and id — NamedMapPop-class","title":"Raw population with genetic map and id — NamedMapPop-class","text":"Extends MapPop-class add id, mother father.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw population with genetic map and id — NamedMapPop-class","text":"","code":"# S4 method for class 'NamedMapPop' x[i]  # S4 method for class 'NamedMapPop' c(x, ...)  isNamedMapPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw population with genetic map and id — NamedMapPop-class","text":"x 'NamedMapPop' object index individuals ... additional 'NamedMapPop' objects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Raw population with genetic map and id — NamedMapPop-class","text":"[: Extract NamedMapPop index c(NamedMapPop): Combine multiple NamedMapPops","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Raw population with genetic map and id — NamedMapPop-class","text":"isNamedMapPop(): Test object NamedMapPop class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/NamedMapPop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Raw population with genetic map and id — NamedMapPop-class","text":"id individual's identifier mother identifier individual's mother father identifier individual's father","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/Pop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Population — Pop-class","title":"Population — Pop-class","text":"Extends RawPop-class add sex, genetic values, phenotypes, pedigrees.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/Pop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population — Pop-class","text":"","code":"# S4 method for class 'Pop' x[i]  # S4 method for class 'Pop' c(x, ...)  # S4 method for class 'Pop' show(object)  # S4 method for class 'Pop' length(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/Pop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population — Pop-class","text":"x 'Pop' object index individuals ... additional 'Pop' objects object 'Pop' object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/Pop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Population — Pop-class","text":"[: Extract Pop index id c(Pop): Combine multiple Pops show(Pop): Show population summary length(Pop): Number individuals Pop (nInd())","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/Pop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Population — Pop-class","text":"id individual's identifier iid individual's internal identifier mother identifier individual's mother father identifier individual's father sex sex individuals: \"M\" males, \"F\" females, \"H\" hermaphrodites nTraits number traits gv matrix genetic values. using GxE traits, gv reflects gv p=0.5. Dimensions nInd nTraits. pheno matrix phenotypic values. Dimensions nInd nTraits. ebv matrix estimated breeding values. Dimensions nInd rows variable number columns. gxe list containing GxE slopes GxE traits fixEff fixed effect relating phenotype. Used genomic selection models otherwise ignored. misc list whose elements correspond additional miscellaneous nodes items individuals population (see example newPop) - support vectors matrices objects generic length subset method. list normally empty exists solely open slot available uses store extra information individuals. miscPop list length containing optional meta data population (see example newPop). list empty unless information supplied user. Note list emptied every time population subsetted combined meta data old population might valid anymore.","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP Model — RRBLUP","title":"RR-BLUP Model — RRBLUP","text":"Fits RR-BLUP model genomic predictions.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP Model — RRBLUP","text":"","code":"RRBLUP(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 1000L,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP Model — RRBLUP","text":"pop Pop-class serve training population traits integer indicating trait traits model, vector trait names, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations. used number traits greater 1. simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP Model — RRBLUP","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.5506595"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP2.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP Model 2 — RRBLUP2","title":"RR-BLUP Model 2 — RRBLUP2","text":"Fits RR-BLUP model genomic predictions. implementation meant situations RRBLUP slow. Note RRBLUP2 faster certain situations, see details . users use RRBLUP.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP Model 2 — RRBLUP2","text":"","code":"RRBLUP2(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 10,   Vu = NULL,   Ve = NULL,   useEM = TRUE,   tol = 1e-06,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP Model 2 — RRBLUP2","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. Unlike RRBLUP, univariate models supported. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations. Vu marker effect variance. value NULL, reasonable starting point chosen automatically. Ve error variance. value NULL, reasonable starting point chosen automatically. useEM use EM solve variance components. false, initial values considered true. tol tolerance EM algorithm convergence simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RR-BLUP Model 2 — RRBLUP2","text":"RRBLUP2 function works best number markers large. solves RR-BLUP problem setting solving Henderson's mixed model equations. Solving equations involves square matrix dimensions equal number fixed effects plus number random effects (markers). Whereas RRBLUP function solves RR-BLUP problem using EMMA approach. approach involves square matrix dimensions equal number phenotypic records. means RRBLUP2 function uses less memory RRBLUP number markers approximately equal smaller number phenotypic records. RRBLUP2 function recommend cases variance components unknown. uses EM algorithm solve unknown variance components, generally considerably slower EMMA approach RRBLUP. number iterations EM algorithm set maxIter. default value typically small convergence. algorithm fails converge warning displayed, results given last iteration. results may \"good enough\". However make claim effect, can generalize possible use cases. RRBLUP2 function can quickly solve mixed model equations without estimating variance components. variance components set defining Vu Ve. Estimation components suppressed setting useEM false. may useful model retrained multiple times simulation. run RRBLUP function first time model trained, use variance components output future runs RRBLUP2 functions. , can make claim general robustness approach.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP Model 2 — RRBLUP2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP2(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1      0.646779"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUPMemUse.html","id":null,"dir":"Reference","previous_headings":"","what":"RRBLUP Memory Usage — RRBLUPMemUse","title":"RRBLUP Memory Usage — RRBLUPMemUse","text":"Estimates amount RAM needed run RRBLUP related functions given training population size. Note function may underestimate total usage.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUPMemUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RRBLUP Memory Usage — RRBLUPMemUse","text":"","code":"RRBLUPMemUse(nInd, nMarker, model = \"REG\")"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUPMemUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RRBLUP Memory Usage — RRBLUPMemUse","text":"nInd number individuals training population nMarker number markers per individual model either \"REG\", \"GCA\", \"SCA\" RRBLUP RRBLUP_GCA RRBLUP_SCA respectively.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUPMemUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RRBLUP Memory Usage — RRBLUPMemUse","text":"Returns estimate required gigabytes RAM","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUPMemUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RRBLUP Memory Usage — RRBLUPMemUse","text":"","code":"RRBLUPMemUse(nInd=1000, nMarker=5000) #> [1] 0.06412"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP Model with Dominance — RRBLUP_D","title":"RR-BLUP Model with Dominance — RRBLUP_D","text":"Fits RR-BLUP model genomic predictions includes dominance effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP Model with Dominance — RRBLUP_D","text":"","code":"RRBLUP_D(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 40L,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP Model with Dominance — RRBLUP_D","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations. used number traits greater 1. simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP Model with Dominance — RRBLUP_D","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_D(pop, simParam=SP) #> Warning: Reached maxIter without converging pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1      -0.18314"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D2.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP with Dominance Model 2 — RRBLUP_D2","title":"RR-BLUP with Dominance Model 2 — RRBLUP_D2","text":"Fits RR-BLUP model genomic predictions includes dominance effects. implementation meant situations RRBLUP_D slow. Note RRBLUP_D2 faster certain situations. users use RRBLUP_D.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP with Dominance Model 2 — RRBLUP_D2","text":"","code":"RRBLUP_D2(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 10,   Va = NULL,   Vd = NULL,   Ve = NULL,   useEM = TRUE,   tol = 1e-06,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP with Dominance Model 2 — RRBLUP_D2","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations. used number traits greater 1. Va marker effect variance additive effects. value NULL, reasonable starting point chosen automatically. Vd marker effect variance dominance effects. value NULL, reasonable starting point chosen automatically. Ve error variance. value NULL, reasonable starting point chosen automatically. useEM use EM solve variance components. false, initial values considered true. tol tolerance EM algorithm convergence simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_D2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP with Dominance Model 2 — RRBLUP_D2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_D2(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.5624375"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP GCA Model — RRBLUP_GCA","title":"RR-BLUP GCA Model — RRBLUP_GCA","text":"Fits RR-BLUP model estimates seperate marker effects females males. Useful predicting GCA parents single cross hybrids. Can also predict performance specific single cross hybrids.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP GCA Model — RRBLUP_GCA","text":"","code":"RRBLUP_GCA(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 40L,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP GCA Model — RRBLUP_GCA","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations convergence. simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP GCA Model — RRBLUP_GCA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_GCA(pop, simParam=SP) #> Warning: Reached maxIter without converging pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.6468518"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA2.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP GCA Model 2 — RRBLUP_GCA2","title":"RR-BLUP GCA Model 2 — RRBLUP_GCA2","text":"Fits RR-BLUP model estimates seperate marker effects females males. implementation meant situations RRBLUP_GCA slow. Note RRBLUP_GCA2 faster certain situations. users use RRBLUP_GCA.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP GCA Model 2 — RRBLUP_GCA2","text":"","code":"RRBLUP_GCA2(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 10,   VuF = NULL,   VuM = NULL,   Ve = NULL,   useEM = TRUE,   tol = 1e-06,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP GCA Model 2 — RRBLUP_GCA2","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations convergence. VuF marker effect variance females. value NULL, reasonable starting point chosen automatically. VuM marker effect variance males. value NULL, reasonable starting point chosen automatically. Ve error variance. value NULL, reasonable starting point chosen automatically. useEM use EM solve variance components. false, initial values considered true. tol tolerance EM algorithm convergence simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_GCA2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP GCA Model 2 — RRBLUP_GCA2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_GCA2(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.5655579"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP SCA Model — RRBLUP_SCA","title":"RR-BLUP SCA Model — RRBLUP_SCA","text":"extention RRBLUP_GCA adds dominance effects. Note seen consistent benefit model RRBLUP_GCA.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP SCA Model — RRBLUP_SCA","text":"","code":"RRBLUP_SCA(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 40L,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP SCA Model — RRBLUP_SCA","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations convergence. simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP SCA Model — RRBLUP_SCA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_SCA(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1            NA"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA2.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP SCA Model 2 — RRBLUP_SCA2","title":"RR-BLUP SCA Model 2 — RRBLUP_SCA2","text":"Fits RR-BLUP model estimates seperate additive effects females males dominance effect. implementation meant situations RRBLUP_SCA slow. Note RRBLUP_SCA2 faster certain situations. users use RRBLUP_SCA.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RR-BLUP SCA Model 2 — RRBLUP_SCA2","text":"","code":"RRBLUP_SCA2(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 10,   VuF = NULL,   VuM = NULL,   VuD = NULL,   Ve = NULL,   useEM = TRUE,   tol = 1e-06,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RR-BLUP SCA Model 2 — RRBLUP_SCA2","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations convergence. VuF marker effect variance females. value NULL, reasonable starting point chosen automatically. VuM marker effect variance males. value NULL, reasonable starting point chosen automatically. VuD marker effect variance dominance. value NULL, reasonable starting point chosen automatically. Ve error variance. value NULL, reasonable starting point chosen automatically. useEM use EM solve variance components. false, initial values considered true. tol tolerance EM algorithm convergence simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRBLUP_SCA2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RR-BLUP SCA Model 2 — RRBLUP_SCA2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP_SCA2(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.8001477"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRsol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RR-BLUP Solution — RRsol-class","title":"RR-BLUP Solution — RRsol-class","text":"Contains output AlphaSimR's genomic selection functions.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RRsol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RR-BLUP Solution — RRsol-class","text":"gv Trait(s) estimating genetic values bv Trait(s) estimating breeding values female Trait(s) estimating GCA female pool male Trait(s) estimating GCA male pool Vu Estimated marker variance(s) Ve Estimated error variance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Population — RawPop-class","title":"Raw Population — RawPop-class","text":"raw population class contains genotype data.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Population — RawPop-class","text":"","code":"# S4 method for class 'RawPop' x[i]  # S4 method for class 'RawPop' c(x, ...)  # S4 method for class 'RawPop' show(object)  isRawPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw Population — RawPop-class","text":"x 'RawPop' object index individuals ... additional 'RawPop' objects object 'RawPop' object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Raw Population — RawPop-class","text":"[: Extract RawPop index c(RawPop): Combine multiple RawPops show(RawPop): Show population summary","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Raw Population — RawPop-class","text":"isRawPop(): Test object RawPop class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/RawPop-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Raw Population — RawPop-class","text":"nInd number individuals nChr number chromosomes ploidy level ploidy nLoci number loci per chromosome geno list nChr length containing chromosome genotypes. element three dimensional array raw values. array dimensions nLoci ploidy nInd.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation parameters — SimParam","title":"Simulation parameters — SimParam","text":"Container global simulation parameters. Saving object SP allow accessed function defaults.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulation parameters — SimParam","text":"default founder population population used initalize SimParam object. population can changed replacing population founderPop slot. must run resetPop existing populations obtain new trait values.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Simulation parameters — SimParam","text":"nThreads number threads used platforms OpenMP support snpChips list SNP chips invalidQtl list segregating sites valid QTL invalidSnp list segregating sites valid SNP founderPop founder population used variance scaling finalizePop function applied newly created populations. Currently nothing changed expert users. allowEmptyPop true, population arguments nInd=0 return empty population warning instead error. v crossover interference parameter gamma model recombination. value 1 indicates crossover interference (e.g. Haldane mapping function). value 2.6 approximates degree crossover interference implied Kosambi mapping function. (default 2.6) p proportion crossovers coming non-interfering pathway. (default 0) quadProb probability quadrivalent pairing autopolyploid. (default 0)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Simulation parameters — SimParam","text":"traitNames vector trait names snpChipNames vector chip names traits list traits nChr number chromosomes nTraits number traits nSnpChips number SNP chips segSites segregating sites per chromosome sexes sexes used mating sepMap seperate genetic maps males females genMap \"matrix\" chromosome genetic maps femaleMap \"matrix\" chromosome genetic maps females maleMap \"matrix\" chromosome genetic maps males centromere position centromeres genetic map femaleCentromere position centromeres female genetic map maleCentromere position centromeres male genetic map lastId last ID number assigned isTrackPed pedigree tracked pedigree pedigree matrix individuals isTrackRec recombination tracked recHist list historic recombination events haplotypes list computed IBD haplotypes varA additive genetic variance founderPop varG total genetic variance founderPop varE default error variance version version AlphaSimR used generate object","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Simulation parameters — SimParam","text":"SimParam$new() SimParam$setTrackPed() SimParam$setTrackRec() SimParam$resetPed() SimParam$restrSegSites() SimParam$setSexes() SimParam$setFounderHap() SimParam$addSnpChip() SimParam$addSnpChipByName() SimParam$addStructuredSnpChip() SimParam$addTraitA() SimParam$addTraitAD() SimParam$altAddTraitAD() SimParam$addTraitAG() SimParam$addTraitADG() SimParam$addTraitAE() SimParam$addTraitADE() SimParam$addTraitAEG() SimParam$addTraitADEG() SimParam$manAddTrait() SimParam$importTrait() SimParam$switchTrait() SimParam$removeTrait() SimParam$setVarE() SimParam$setCorE() SimParam$rescaleTraits() SimParam$setRecombRatio() SimParam$switchGenMap() SimParam$switchFemaleMap() SimParam$switchMaleMap() SimParam$addToRec() SimParam$ibdHaplo() SimParam$updateLastId() SimParam$addToPed() SimParam$clone()","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Simulation parameters — SimParam","text":"Starts process building new simulation creating new SimParam object assigning founder population class. recommended save object name \"SP\", subsequent functions check global environment object name simParam arguments NULL. allows call functions without explicitly supplying simParam argument every call.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$new(founderPop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"founderPop object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-settrackped-","dir":"Reference","previous_headings":"","what":"Method setTrackPed()","title":"Simulation parameters — SimParam","text":"Sets pedigree tracking simulation. default pedigree tracking turned . turned , pedigree individuals created tracked, except created hybridCross. Turning pedigree tracking turn recombination tracking turned .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setTrackPed(isTrackPed, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"isTrackPed pedigree tracking . force check running simulation ignored. set TRUE know .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$setTrackPed(TRUE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-settrackrec-","dir":"Reference","previous_headings":"","what":"Method setTrackRec()","title":"Simulation parameters — SimParam","text":"Sets recombination tracking simulation. default recombination tracking turned . turned recombination tracking also turn pedigree tracking. Recombination tracking keeps records individuals created, except created hybridCross, pedigree tracked.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setTrackRec(isTrackRec, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"isTrackRec recombination tracking . force check running simulation ignored. set TRUE know .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$setTrackRec(TRUE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-resetped-","dir":"Reference","previous_headings":"","what":"Method resetPed()","title":"Simulation parameters — SimParam","text":"Resets internal lastId, pedigree recombination tracking (use) supplied lastId. careful using function may introduce bug use individuals deleted portion pedigree.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$resetPed(lastId = 0L)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"lastId last ID include pedigree","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L}  #Create population pop = newPop(founderPop, simParam=SP) pop@id # 1:10  #Create another population after reseting pedigree SP$resetPed() pop2 = newPop(founderPop, simParam=SP) pop2@id # 1:10"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-restrsegsites-","dir":"Reference","previous_headings":"","what":"Method restrSegSites()","title":"Simulation parameters — SimParam","text":"Sets restrictions segregating sites can serve SNP /QTL.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$restrSegSites(   minQtlPerChr = NULL,   minSnpPerChr = NULL,   excludeQtl = NULL,   excludeSnp = NULL,   overlap = FALSE,   minSnpFreq = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"minQtlPerChr minimum number segregating sites QTLs. Can single value vector values chromosome. minSnpPerChr minimum number segregating sites SNPs. Can single value vector values chromosome. excludeQtl optional vector segregating site names exclude consideration viable QTL. excludeSnp optional vector segregating site names exclude consideration viable SNP. overlap SNP QTL sites allowed overlap. minSnpFreq minimum allowable frequency SNP loci. minimum SNP frequency used value NULL.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$restrSegSites(minQtlPerChr=5, minSnpPerChr=5)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-setsexes-","dir":"Reference","previous_headings":"","what":"Method setSexes()","title":"Simulation parameters — SimParam","text":"Changes sexes determined simulation. default sexes \"\", indicating individuals hermaphrodites. add sexes simulation, run function \"yes_sys\" \"yes_rand\". value \"yes_sys\" systematically assign sexes newly created individuals first male female. Populations odd number individuals one male female. value \"yes_rand\" randomly assign sex individual.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setSexes(sexes, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"sexes acceptable value \"\", \"yes_sys\", \"yes_rand\" force check running simulation ignored. set TRUE know .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$setSexes(\"yes_sys\")"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-setfounderhap-","dir":"Reference","previous_headings":"","what":"Method setFounderHap()","title":"Simulation parameters — SimParam","text":"Allows manual setting founder haplotypes. functionality fully documented, still experimental.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setFounderHap(hapMap)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"hapMap list founder haplotypes","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addsnpchip-","dir":"Reference","previous_headings":"","what":"Method addSnpChip()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible SNPs SNP chip","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addSnpChip(nSnpPerChr, minSnpFreq = NULL, refPop = NULL, name = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nSnpPerChr number SNPs per chromosome. Can single value nChr values. minSnpFreq minimum allowable frequency SNP loci. NULL, minimum frequency used. refPop reference population calculating SNP frequency. NULL, founder population used. name optional name chip","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addSnpChip(10)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addsnpchipbyname-","dir":"Reference","previous_headings":"","what":"Method addSnpChipByName()","title":"Simulation parameters — SimParam","text":"Assigns SNPs SNP chip supplying marker names. function check excluded SNPs add SNPs list excluded QTL purpose avoiding overlap SNPs QTL. Excluding SNPs used QTL can accomplished using excludeQtl argument SimParam's restrSegSites function.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addSnpChipByName(markers, name = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"markers vector names markers name optional name chip","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addSnpChipByName(c(\"1_1\",\"1_3\"))"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addstructuredsnpchip-","dir":"Reference","previous_headings":"","what":"Method addStructuredSnpChip()","title":"Simulation parameters — SimParam","text":"Randomly selects number snps structure assigns chips based structure","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addStructuredSnpChip(nSnpPerChr, structure, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nSnpPerChr number SNPs per chromosome. Can single value nChr values. structure matrix.  Rows snp chips, columns chips. value true snp chip. force check running simulation ignored. set TRUE know .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraita-","dir":"Reference","previous_headings":"","what":"Method addTraitA()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one additive traits. simulating one trait, traits pleiotropic correlated additive effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitA(   nQtlPerChr,   mean = 0,   var = 1,   corA = NULL,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits corA matrix correlations additive effects gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitA(10)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitad-","dir":"Reference","previous_headings":"","what":"Method addTraitAD()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one traits dominance. simulating one trait, traits pleiotropic correlated effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitAD(   nQtlPerChr,   mean = 0,   var = 1,   meanDD = 0,   varDD = 0,   corA = NULL,   corDD = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits meanDD mean dominance degree varDD variance dominance degree corA matrix correlations additive effects corDD matrix correlations dominance degrees useVarA tune according additive genetic variance true. FALSE, tuning performed according total genetic variance. gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitAD(10, meanDD=0.5)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-altaddtraitad-","dir":"Reference","previous_headings":"","what":"Method altAddTraitAD()","title":"Simulation parameters — SimParam","text":"alternative method adding trait additive  dominance effects AlphaSimR simulation. function attempts create trait matching user defined values number QTL, inbreeding depression, additive genetic variance dominance genetic variance.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$altAddTraitAD(   nQtlPerChr,   mean = 0,   varA = 1,   varD = 0,   inbrDepr = 0,   limMeanDD = c(0, 1.5),   limVarDD = c(0, 0.5),   silent = FALSE,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean desired mean trait varA desired additive variance varD desired dominance variance inbrDepr desired inbreeding depression, see details limMeanDD limits meanDD, see details limVarDD limits varDD, see details silent summary details printed console force check running simulation ignored. set TRUE know . name optional name trait","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation parameters — SimParam","text":"function always add trait 'SimParam', unless error occurs picking QTLs. resulting trait always desired mean additive genetic variance. However, may desired values inbreeding depression dominance variance. Thus, strongly recommended check output printed console determine close trait's parameters came desired values. mean additive genetic variance always achieved exactly. function attempts achieve desired dominance variance inbreeding depression staying within user supplied constraints acceptable range dominance degree mean variance. desired values achieved, acceptable range need increased /number QTL may need increased. limits setting range dominance degree mean variance, care taken regards biological feasibility limits supplied. default limits somewhat arbitrarily set, make claim reasonable limits routine use. Inbreeding depression function defined difference mean genetic value population allele frequency reference population (population used initialize SimParam) Hardy-Weinberg equilibrium compared population allele frequency fully inbred. equivalent amount mean population increases going inbreeding coefficient 1 (fully inbred) population inbreeding coefficient 0 (Hardy-Weinberg equilibrium). Note sign value (usually) positive. corresponds detrimental effect inbreeding higher values trait considered biologically beneficial. Summary information trait printed console silent=FALSE. summary information reports inbreeding depression dominance variance population well dominance degree mean variance applied trait.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$altAddTraitAD(nQtlPerChr=10, mean=0, varA=1, varD=0.05, inbrDepr=0.2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitag-","dir":"Reference","previous_headings":"","what":"Method addTraitAG()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one additive GxE traits. simulating one trait, traits pleiotropic correlated effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitAG(   nQtlPerChr,   mean = 0,   var = 1,   varGxE = 1e-06,   varEnv = 0,   corA = NULL,   corGxE = NULL,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits varGxE vector total genotype--environment variances traits varEnv vector environmental variances one traits corA matrix correlations additive effects corGxE matrix correlations GxE effects gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitAG(10, varGxE=2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitadg-","dir":"Reference","previous_headings":"","what":"Method addTraitADG()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs trait dominance GxE.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitADG(   nQtlPerChr,   mean = 0,   var = 1,   varEnv = 0,   varGxE = 1e-06,   meanDD = 0,   varDD = 0,   corA = NULL,   corDD = NULL,   corGxE = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits varEnv vector environmental variances one traits varGxE vector total genotype--environment variances traits meanDD mean dominance degree varDD variance dominance degree corA matrix correlations additive effects corDD matrix correlations dominance degrees corGxE matrix correlations GxE effects useVarA tune according additive genetic variance true gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitADG(10, meanDD=0.5, varGxE=2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitae-","dir":"Reference","previous_headings":"","what":"Method addTraitAE()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one additive epistasis traits. simulating one trait, traits pleiotropic correlated additive effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitAE(   nQtlPerChr,   mean = 0,   var = 1,   relAA = 0,   corA = NULL,   corAA = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits relAA relative value additive--additive variance compared additive variance diploid organism allele frequency 0.5 corA matrix correlations additive effects corAA matrix correlations additive--additive effects useVarA tune according additive genetic variance true. FALSE, tuning performed according total genetic variance. gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitAE(10, relAA=0.1)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitade-","dir":"Reference","previous_headings":"","what":"Method addTraitADE()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one traits dominance epistasis. simulating one trait, traits pleiotropic correlated effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitADE(   nQtlPerChr,   mean = 0,   var = 1,   meanDD = 0,   varDD = 0,   relAA = 0,   corA = NULL,   corDD = NULL,   corAA = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits meanDD mean dominance degree varDD variance dominance degree relAA relative value additive--additive variance compared additive variance diploid organism allele frequency 0.5 corA matrix correlations additive effects corDD matrix correlations dominance degrees corAA matrix correlations additive--additive effects useVarA tune according additive genetic variance true. FALSE, tuning performed according total genetic variance. gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitADE(10)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitaeg-","dir":"Reference","previous_headings":"","what":"Method addTraitAEG()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs one additive epistasis GxE traits. simulating one trait, traits pleiotropic correlated effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitAEG(   nQtlPerChr,   mean = 0,   var = 1,   relAA = 0,   varGxE = 1e-06,   varEnv = 0,   corA = NULL,   corAA = NULL,   corGxE = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits relAA relative value additive--additive variance compared additive variance diploid organism allele frequency 0.5 varGxE vector total genotype--environment variances traits varEnv vector environmental variances one traits corA matrix correlations additive effects corAA matrix correlations additive--additive effects corGxE matrix correlations GxE effects useVarA tune according additive genetic variance true. FALSE, tuning performed according total genetic variance. gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitAEG(10, varGxE=2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtraitadeg-","dir":"Reference","previous_headings":"","what":"Method addTraitADEG()","title":"Simulation parameters — SimParam","text":"Randomly assigns eligible QTLs trait dominance, epistasis GxE.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addTraitADEG(   nQtlPerChr,   mean = 0,   var = 1,   varEnv = 0,   varGxE = 1e-06,   meanDD = 0,   varDD = 0,   relAA = 0,   corA = NULL,   corDD = NULL,   corAA = NULL,   corGxE = NULL,   useVarA = TRUE,   gamma = FALSE,   shape = 1,   force = FALSE,   name = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"nQtlPerChr number QTLs per chromosome. Can single value nChr values. mean vector desired mean genetic values one traits var vector desired genetic variances one traits varEnv vector environmental variances one traits varGxE vector total genotype--environment variances traits meanDD mean dominance degree varDD variance dominance degree relAA relative value additive--additive variance compared additive variance diploid organism allele frequency 0.5 corA matrix correlations additive effects corDD matrix correlations dominance degrees corAA matrix correlations additive--additive effects corGxE matrix correlations GxE effects useVarA tune according additive genetic variance true gamma gamma distribution used instead normal shape shape parameter gamma distribution (rate/scale parameter gamma distribution accounted via desired level genetic variance, var argument) force check running simulation ignored. set TRUE know . name optional name trait(s)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitADEG(10, meanDD=0.5, varGxE=2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-manaddtrait-","dir":"Reference","previous_headings":"","what":"Method manAddTrait()","title":"Simulation parameters — SimParam","text":"Manually add new trait simulation. Trait must formatted LociMap-class. trait already formatted, consider using importTrait.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$manAddTrait(lociMap, varE = NA_real_, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"lociMap new object descended LociMap-class varE default error variance phenotype, optional force check running simulation ignored. set TRUE know ","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-importtrait-","dir":"Reference","previous_headings":"","what":"Method importTrait()","title":"Simulation parameters — SimParam","text":"Manually add new trait(s) simulation. Unlike manAddTrait function, function require formatting trait LociMap-class. formatting performed automatically user, user friendly data.frames matrices taken inputs. function works AD trait types.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$importTrait(   markerNames,   addEff,   domEff = NULL,   intercept = NULL,   name = NULL,   varE = NULL,   force = FALSE )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"markerNames vector names QTL addEff matrix additive effects (nLoci x nTraits). Alternatively, vector length nLoci can supplied single trait. domEff optional dominance effects locus intercept optional intercepts trait name optional name(s) trait(s) varE default error variance phenotype, optional force check running simulation ignored. set TRUE know ","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-switchtrait-","dir":"Reference","previous_headings":"","what":"Method switchTrait()","title":"Simulation parameters — SimParam","text":"Switch trait simulation.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$switchTrait(traitPos, lociMap, varE = NA_real_, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"traitPos integer indicate trait switch lociMap new object descended LociMap-class varE default error variance phenotype, optional force check running simulation ignored. set TRUE know ","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-removetrait-","dir":"Reference","previous_headings":"","what":"Method removeTrait()","title":"Simulation parameters — SimParam","text":"Remove trait simulation","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$removeTrait(traits, force = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"traits integer vector indicating traits remove force check running simulation ignored. set TRUE know ","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-setvare-","dir":"Reference","previous_headings":"","what":"Method setVarE()","title":"Simulation parameters — SimParam","text":"Defines default values error variances used setPheno. defaults used automatically generate phenotypes new populations created. See details section setPheno information arguments used.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setVarE(h2 = NULL, H2 = NULL, varE = NULL, corE = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"h2 vector desired narrow-sense heritabilities H2 vector desired broad-sense heritabilities varE vector matrix error variances corE optional matrix error correlations","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitA(10) SP$setVarE(h2=0.5)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-setcore-","dir":"Reference","previous_headings":"","what":"Method setCorE()","title":"Simulation parameters — SimParam","text":"Defines correlation structure default error variances. must call setVarE first define default error variances.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setCorE(corE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"corE correlation matrix error variances","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$addTraitA(10, mean=c(0,0), var=c(1,1), corA=diag(2)) SP$setVarE(varE=c(1,1)) E = 0.5*diag(2)+0.5 #Positively correlated error SP$setCorE(E)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-rescaletraits-","dir":"Reference","previous_headings":"","what":"Method rescaleTraits()","title":"Simulation parameters — SimParam","text":"Linearly scales traits achieve desired values means variances founder population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$rescaleTraits(   mean = 0,   var = 1,   varEnv = 0,   varGxE = 1e-06,   useVarA = TRUE )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"mean vector new trait means var vector new trait variances varEnv vector new environmental variances varGxE vector new GxE variances useVarA tune according additive genetic variance true","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-19","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP) meanG(pop)  #Change mean to 1 SP$rescaleTraits(mean=1) \\dontshow{SP$nThreads = 1L} #Run resetPop for change to take effect pop = resetPop(pop, simParam=SP) meanG(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-setrecombratio-","dir":"Reference","previous_headings":"","what":"Method setRecombRatio()","title":"Simulation parameters — SimParam","text":"Set relative recombination rates males females. allows sex-specific recombination rates, assumption equivalent recombination landscapes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$setRecombRatio(femaleRatio)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"femaleRatio relative ratio recombination females compared males. value 2 indicate twice much recombination females. value must greater 0. (default 1)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"examples-20","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) \\dontshow{SP$nThreads = 1L} SP$setRecombRatio(2) #Twice as much recombination in females"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-switchgenmap-","dir":"Reference","previous_headings":"","what":"Method switchGenMap()","title":"Simulation parameters — SimParam","text":"Replaces existing genetic map.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$switchGenMap(genMap, centromere = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"genMap list length nChr containing numeric vectors position segregating site chromosome. centromere numeric vector centromere positions. NULL, centromere assumed metacentric.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-switchfemalemap-","dir":"Reference","previous_headings":"","what":"Method switchFemaleMap()","title":"Simulation parameters — SimParam","text":"Replaces existing female genetic map.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$switchFemaleMap(genMap, centromere = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"genMap list length nChr containing numeric vectors position segregating site chromosome. centromere numeric vector centromere positions. NULL, centromere assumed metacentric.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-switchmalemap-","dir":"Reference","previous_headings":"","what":"Method switchMaleMap()","title":"Simulation parameters — SimParam","text":"Replaces existing male genetic map.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$switchMaleMap(genMap, centromere = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"genMap list length nChr containing numeric vectors position segregating site chromosome. centromere numeric vector centromere positions. NULL, centromere assumed metacentric.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtorec-","dir":"Reference","previous_headings":"","what":"Method addToRec()","title":"Simulation parameters — SimParam","text":"internal use .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addToRec(lastId, id, mother, father, isDH, hist, ploidy)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"lastId ID last individual id name individual mother vector mother iids father vector father iids isDH indicator DH lines hist new recombination history ploidy ploidy level","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-ibdhaplo-","dir":"Reference","previous_headings":"","what":"Method ibdHaplo()","title":"Simulation parameters — SimParam","text":"internal use .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$ibdHaplo(iid)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"iid internal ID","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-updatelastid-","dir":"Reference","previous_headings":"","what":"Method updateLastId()","title":"Simulation parameters — SimParam","text":"internal use .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$updateLastId(lastId)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-32","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"lastId last ID assigned","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-addtoped-","dir":"Reference","previous_headings":"","what":"Method addToPed()","title":"Simulation parameters — SimParam","text":"internal use .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$addToPed(lastId, id, mother, father, isDH)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-33","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"lastId ID last individual id name individual mother vector mother iids father vector father iids isDH indicator DH lines","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Simulation parameters — SimParam","text":"objects class cloneable method.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation parameters — SimParam","text":"","code":"SimParam$clone(deep = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"arguments-34","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation parameters — SimParam","text":"deep Whether make deep clone.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/SimParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation parameters — SimParam","text":"","code":"## ------------------------------------------------ ## Method `SimParam$new` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  ## ------------------------------------------------ ## Method `SimParam$setTrackPed` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$setTrackPed(TRUE)  ## ------------------------------------------------ ## Method `SimParam$setTrackRec` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$setTrackRec(TRUE)  ## ------------------------------------------------ ## Method `SimParam$resetPed` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP) pop@id # 1:10 #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"  #Create another population after reseting pedigree SP$resetPed() pop2 = newPop(founderPop, simParam=SP) pop2@id # 1:10 #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"  ## ------------------------------------------------ ## Method `SimParam$restrSegSites` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$restrSegSites(minQtlPerChr=5, minSnpPerChr=5)  ## ------------------------------------------------ ## Method `SimParam$setSexes` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$setSexes(\"yes_sys\")  ## ------------------------------------------------ ## Method `SimParam$addSnpChip` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addSnpChip(10)  ## ------------------------------------------------ ## Method `SimParam$addSnpChipByName` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addSnpChipByName(c(\"1_1\",\"1_3\"))  ## ------------------------------------------------ ## Method `SimParam$addTraitA` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  ## ------------------------------------------------ ## Method `SimParam$addTraitAD` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5)  ## ------------------------------------------------ ## Method `SimParam$altAddTraitAD` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$altAddTraitAD(nQtlPerChr=10, mean=0, varA=1, varD=0.05, inbrDepr=0.2) #> A new trait called Trait1 was added.  #>    varD = 0.03272035  #>    inbrDepr = 0.20277  #>    meanDD = 0.4104498  #>    varDD = 0.5   ## ------------------------------------------------ ## Method `SimParam$addTraitAG` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAG(10, varGxE=2)  ## ------------------------------------------------ ## Method `SimParam$addTraitADG` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitADG(10, meanDD=0.5, varGxE=2)  ## ------------------------------------------------ ## Method `SimParam$addTraitAE` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAE(10, relAA=0.1)  ## ------------------------------------------------ ## Method `SimParam$addTraitADE` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitADE(10)  ## ------------------------------------------------ ## Method `SimParam$addTraitAEG` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAEG(10, varGxE=2)  ## ------------------------------------------------ ## Method `SimParam$addTraitADEG` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitADEG(10, meanDD=0.5, varGxE=2)  ## ------------------------------------------------ ## Method `SimParam$setVarE` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  ## ------------------------------------------------ ## Method `SimParam$setCorE` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10, mean=c(0,0), var=c(1,1), corA=diag(2)) SP$setVarE(varE=c(1,1)) E = 0.5*diag(2)+0.5 #Positively correlated error SP$setCorE(E) #> Warning: This function has been deprecated. Use simParam$setVarE instead.  ## ------------------------------------------------ ## Method `SimParam$rescaleTraits` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP) meanG(pop) #>        Trait1  #> -8.881784e-17   #Change mean to 1 SP$rescaleTraits(mean=1) #Run resetPop for change to take effect pop = resetPop(pop, simParam=SP) meanG(pop) #> Trait1  #>      1   ## ------------------------------------------------ ## Method `SimParam$setRecombRatio` ## ------------------------------------------------  #Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$setRecombRatio(2) #Twice as much recombination in females"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive trait — TraitA-class","title":"Additive trait — TraitA-class","text":"Extends LociMap-class model additive traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive trait — TraitA-class","text":"addEff additive effects intercept adjustment factor gv","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA2-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Sex specific additive trait — TraitA2-class","title":"Sex specific additive trait — TraitA2-class","text":"Extends TraitA-class model seperate additive effects parent origin. Used exclusively genomic selection.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA2-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Sex specific additive trait — TraitA2-class","text":"addEffMale additive effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA2D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Sex specific additive and dominance trait — TraitA2D-class","title":"Sex specific additive and dominance trait — TraitA2D-class","text":"Extends TraitA2-class add dominance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitA2D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Sex specific additive and dominance trait — TraitA2D-class","text":"domEff dominance effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive and dominance trait — TraitAD-class","title":"Additive and dominance trait — TraitAD-class","text":"Extends TraitA-class add dominance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive and dominance trait — TraitAD-class","text":"domEff dominance effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive, dominance, and epistatic trait — TraitADE-class","title":"Additive, dominance, and epistatic trait — TraitADE-class","text":"Extends TraitAD-class add epistasis","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive, dominance, and epistatic trait — TraitADE-class","text":"epiEff epistatic effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADEG-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive, dominance, epistasis, and GxE trait — TraitADEG-class","title":"Additive, dominance, epistasis, and GxE trait — TraitADEG-class","text":"Extends TraitADE-class add GxE effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADEG-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive, dominance, epistasis, and GxE trait — TraitADEG-class","text":"gxeEff GxE effects gxeInt GxE intercept envVar Environmental variance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADG-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive, dominance and GxE trait — TraitADG-class","title":"Additive, dominance and GxE trait — TraitADG-class","text":"Extends TraitAD-class add GxE effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitADG-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive, dominance and GxE trait — TraitADG-class","text":"gxeEff GxE effects gxeInt GxE intercept envVar Environmental variance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive and epistatic trait — TraitAE-class","title":"Additive and epistatic trait — TraitAE-class","text":"Extends TraitA-class add epistasis","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive and epistatic trait — TraitAE-class","text":"epiEff epistatic effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAEG-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive, epistasis and GxE trait — TraitAEG-class","title":"Additive, epistasis and GxE trait — TraitAEG-class","text":"Extends TraitAE-class add GxE effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAEG-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive, epistasis and GxE trait — TraitAEG-class","text":"gxeEff GxE effects gxeInt GxE intercept envVar Environmental variance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAG-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive and GxE trait — TraitAG-class","title":"Additive and GxE trait — TraitAG-class","text":"Extends TraitA-class add GxE effects","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/TraitAG-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Additive and GxE trait — TraitAG-class","text":"gxeEff GxE effects gxeInt GxE intercept envVar Environmental variance","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive-by-additive epistatic deviations — aa","title":"Additive-by-additive epistatic deviations — aa","text":"Returns additive--additive epistatic deviations traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive-by-additive epistatic deviations — aa","text":"","code":"aa(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive-by-additive epistatic deviations — aa","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/aa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive-by-additive epistatic deviations — aa","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) aa(pop, simParam=SP) #>       Trait1 #>  [1,]      0 #>  [2,]      0 #>  [3,]      0 #>  [4,]      0 #>  [5,]      0 #>  [6,]      0 #>  [7,]      0 #>  [8,]      0 #>  [9,]      0 #> [10,]      0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/addSegSite.html","id":null,"dir":"Reference","previous_headings":"","what":"Add segregating site to MapPop — addSegSite","title":"Add segregating site to MapPop — addSegSite","text":"function allows adding new segregating site user supplied genotypes MapPop. position site set using genetic map position.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/addSegSite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add segregating site to MapPop — addSegSite","text":"","code":"addSegSite(mapPop, siteName, chr, mapPos, haplo)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/addSegSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add segregating site to MapPop — addSegSite","text":"mapPop object MapPop-class siteName name give segregating site chr chromosome add site mapPos genetic map position site Morgans haplo haplotypes site","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/addSegSite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add segregating site to MapPop — addSegSite","text":"object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/addSegSite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add segregating site to MapPop — addSegSite","text":"","code":"# Creates a populations of 10 outbred individuals # Their genome consists of 1 chromosome and 2 segregating sites founderPop = quickHaplo(nInd=10,nChr=1,segSites=2)  # Add a locus a the 0.5 Morgan map position haplo = matrix(sample(x=0:1, size=20, replace=TRUE), ncol=1)  founderPop2 = addSegSite(founderPop, siteName=\"x\", chr=1, mapPos=0.5, haplo=haplo)  pullSegSiteHaplo(founderPop2) #>      1_1 x 1_2 #> 1_1    0 1   1 #> 1_2    0 1   1 #> 2_1    1 0   1 #> 2_2    1 1   1 #> 3_1    0 0   1 #> 3_2    1 1   1 #> 4_1    1 1   1 #> 4_2    1 1   0 #> 5_1    0 0   1 #> 5_2    0 0   0 #> 6_1    0 1   0 #> 6_2    1 1   0 #> 7_1    0 0   0 #> 7_2    1 1   0 #> 8_1    1 1   1 #> 8_2    0 0   1 #> 9_1    0 0   1 #> 9_2    0 1   1 #> 10_1   0 0   0 #> 10_2   0 0   0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Lose individuals at random — attrition","title":"Lose individuals at random — attrition","text":"Samples individuals random remove population. user supplies probability individuals removed population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lose individuals at random — attrition","text":"","code":"attrition(pop, p)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lose individuals at random — attrition","text":"pop object Pop-class p expected proportion individuals lost attrition.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lose individuals at random — attrition","text":"object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/attrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lose individuals at random — attrition","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=100, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Lose an expected 5% of individuals pop = attrition(pop, p=0.05)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Breeding value — bv","title":"Breeding value — bv","text":"Returns breeding values traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breeding value — bv","text":"","code":"bv(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breeding value — bv","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breeding value — bv","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) bv(pop, simParam=SP) #>           Trait1 #>  [1,] -1.3729488 #>  [2,] -1.1032907 #>  [3,]  1.3956753 #>  [4,] -0.5037185 #>  [5,]  1.1098749 #>  [6,]  0.8228828 #>  [7,]  1.1810924 #>  [8,]  0.1094414 #>  [9,] -0.9555724 #> [10,] -0.6834364"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/cChr.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine MapPop chromosomes — cChr","title":"Combine MapPop chromosomes — cChr","text":"Merges chromosomes multiple MapPop-class NamedMapPop-class objects. MapPop must number chromosomes","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/cChr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine MapPop chromosomes — cChr","text":"","code":"cChr(...)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/cChr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine MapPop chromosomes — cChr","text":"... MapPop-class NamedMapPop-class objects combined","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/cChr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine MapPop chromosomes — cChr","text":"Returns object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/cChr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine MapPop chromosomes — cChr","text":"","code":"pop1 = quickHaplo(nInd=10, nChr=1, segSites=10) pop2 = quickHaplo(nInd=10, nChr=1, segSites=10)  combinedPop = cChr(pop1, pop2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/calcGCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GCA — calcGCA","title":"Calculate GCA — calcGCA","text":"Calculate general combining ability test crosses. Intended output hybridCross using \"testcross\" option, work population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/calcGCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GCA — calcGCA","text":"","code":"calcGCA(pop, use = \"pheno\")"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/calcGCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GCA — calcGCA","text":"pop object Pop-class HybridPop-class use tabulate either genetic values \"gv\", estimated breeding values \"ebv\", phenotypes \"pheno\"","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/calcGCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate GCA — calcGCA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10, inbred=TRUE)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Make crosses for full diallele pop2 = hybridCross(pop, pop, simParam=SP) GCA = calcGCA(pop2, use=\"gv\")"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominance deviations — dd","title":"Dominance deviations — dd","text":"Returns dominance deviations traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominance deviations — dd","text":"","code":"dd(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominance deviations — dd","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominance deviations — dd","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) dd(pop, simParam=SP) #>             Trait1 #>  [1,] -0.538699475 #>  [2,]  0.009939649 #>  [3,]  0.498418920 #>  [4,]  0.357675877 #>  [5,] -0.330793890 #>  [6,]  0.334681096 #>  [7,] -0.411143211 #>  [8,] -0.225089870 #>  [9,]  0.289978568 #> [10,]  0.015032337"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dot-newPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new population (internal) — .newPop","title":"Create new population (internal) — .newPop","text":"Creates new Pop-class object Pop superclass.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dot-newPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new population (internal) — .newPop","text":"","code":".newPop(   rawPop,   id = NULL,   mother = NULL,   father = NULL,   iMother = NULL,   iFather = NULL,   isDH = NULL,   femaleParentPop = NULL,   maleParentPop = NULL,   hist = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dot-newPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new population (internal) — .newPop","text":"rawPop object pop superclass id optional id new individuals mother optional id mothers father optional id fathers iMother optional internal id mothers iFather optional internal id fathers isDH optional indicator DH/inbred individuals femaleParentPop optional population female parents maleParentPop optional population male parents hist optional recombination history simParam object SimParam ... additional arguments passed finalizePop function simParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/dot-newPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new population (internal) — .newPop","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/doubleGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Double the ploidy of individuals — doubleGenome","title":"Double the ploidy of individuals — doubleGenome","text":"Creates new individuals twice ploidy. function created model formation tetraploid potatoes diploid potatoes. function work population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/doubleGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double the ploidy of individuals — doubleGenome","text":"","code":"doubleGenome(pop, keepParents = TRUE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/doubleGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double the ploidy of individuals — doubleGenome","text":"pop object 'Pop' superclass keepParents previous parents used mother father. simParam object 'SimParam' class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/doubleGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double the ploidy of individuals — doubleGenome","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/doubleGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double the ploidy of individuals — doubleGenome","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Create individuals with doubled ploidy pop2 = doubleGenome(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/ebv.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated breeding value — ebv","title":"Estimated breeding value — ebv","text":"wrapper accessing ebv slot","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/ebv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated breeding value — ebv","text":"","code":"ebv(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/ebv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated breeding value — ebv","text":"pop Pop-class similar object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/ebv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated breeding value — ebv","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) pop@ebv = matrix(rnorm(pop@nInd), nrow=pop@nInd, ncol=1) ebv(pop) #>             [,1] #>  [1,] -1.5437975 #>  [2,] -1.1394194 #>  [3,]  0.3708026 #>  [4,]  0.2492918 #>  [5,]  1.2404153 #>  [6,] -0.3715940 #>  [7,]  0.9088430 #>  [8,]  0.7720734 #>  [9,]  0.3666471 #> [10,]  0.2340631"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit genome — editGenome","title":"Edit genome — editGenome","text":"Edits selected loci selected individuals homozygous state either 1 0 allele. gv slot recalculated reflect changes due editing, slots remain .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit genome — editGenome","text":"","code":"editGenome(pop, ind, chr, segSites, allele, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit genome — editGenome","text":"pop object Pop-class ind vector individuals edit chr vector chromosomes edit. Length must match length segSites. segSites vector segregating sites edit. Length must match length chr. allele either 0 1 desired allele simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit genome — editGenome","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit genome — editGenome","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Change individual 1 to homozygous for the 1 allele #at locus 1, chromosome 1 pop2 = editGenome(pop, ind=1, chr=1, segSites=1,                   allele=1, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenomeTopQtl.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit genome - the top QTL — editGenomeTopQtl","title":"Edit genome - the top QTL — editGenomeTopQtl","text":"Edits top QTL (largest additive effect) homozygous state allele increasing. nonfixed QTL edited gv slot recalculated reflect changes due editing, slots remain .","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenomeTopQtl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit genome - the top QTL — editGenomeTopQtl","text":"","code":"editGenomeTopQtl(pop, ind, nQtl, trait = 1, increase = TRUE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenomeTopQtl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit genome - the top QTL — editGenomeTopQtl","text":"pop object Pop-class ind vector individuals edit nQtl number QTL edit trait trait effects guide selection top QTL increase trait value increased decreased simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenomeTopQtl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit genome - the top QTL — editGenomeTopQtl","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/editGenomeTopQtl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit genome - the top QTL — editGenomeTopQtl","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Change up to 10 loci for individual 1 pop2 = editGenomeTopQtl(pop, ind=1, nQtl=10, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/fastRRBLUP.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast RR-BLUP — fastRRBLUP","title":"Fast RR-BLUP — fastRRBLUP","text":"Solves RR-BLUP model genomic predictions given known variance components. implementation meant fast low memory alternative RRBLUP RRBLUP2. Unlike functions, fastRRBLUP fit fixed effects (intercept) account unequal replication.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/fastRRBLUP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast RR-BLUP — fastRRBLUP","text":"","code":"fastRRBLUP(   pop,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   maxIter = 1000,   Vu = NULL,   Ve = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/fastRRBLUP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast RR-BLUP — fastRRBLUP","text":"pop Pop-class serve training population traits integer indicating trait model, trait name, function traits returning single value. univariate models supported. use train model using phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", randomly \"rand\" snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. maxIter maximum number iterations. Vu marker effect variance. value NULL, reasonable value chosen automatically. Ve error variance. value NULL, reasonable value chosen automatically. simParam object SimParam ... additional arguments using function traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/fastRRBLUP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast RR-BLUP — fastRRBLUP","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = fastRRBLUP(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.4520165"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Sumarize genetic parameters — genParam","title":"Sumarize genetic parameters — genParam","text":"Calculates genetic genic additive dominance variances object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sumarize genetic parameters — genParam","text":"","code":"genParam(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sumarize genetic parameters — genParam","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sumarize genetic parameters — genParam","text":"varA nTrait nTrait matrix additive genetic variances varD nTrait nTrait matrix dominance genetic variances varAA nTrait nTrait matrix additive--additive genetic variances varG nTrait nTrait matrix total genetic variances genicVarA nTrait vector additive genic variances genicVarD nTrait vector dominance genic variances genicVarAA nTrait vector additive--additive genic variances genicVarG nTrait vector total genic variances covA_HW nTrait vector additive covariances due non-random mating covD_HW nTrait vector dominance covariances due non-random mating covAA_HW nTrait vector additive--additive covariances due non-random mating covG_HW nTrait vector total genic covariances due non-random mating covA_L nTrait vector additive covariances due linkage disequilibrium covD_L nTrait vector dominance covariances due linkage disequilibrium covAA_L nTrait vector additive--additive covariances due linkage disequilibrium covAD_L nTrait vector additive dominance covariances due linkage disequilibrium covAAA_L nTrait vector additive additive--additive covariances due linkage disequilibrium covDAA_L nTrait vector dominance additive--additive covariances due linkage disequilibrium covG_L nTrait vector total genic covariances due linkage disequilibrium mu nTrait vector trait means mu_HW nTrait vector expected trait means random mating gv matrix genetic values dimensions nInd nTraits bv matrix breeding values dimensions nInd nTraits dd matrix dominance deviations dimensions nInd nTraits aa matrix additive--additive epistatic deviations dimensions nInd nTraits gv_mu nTrait vector intercepts dimensions nInd nTraits gv_a matrix additive genetic values dimensions nInd nTraits gv_d matrix dominance genetic values dimensions nInd nTraits gv_aa matrix additive--additive genetic values dimensions nInd nTraits alpha list average allele subsitution effects length nTraits alpha_HW list average allele subsitution effects Hardy-Weinberg equilibrium length nTraits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sumarize genetic parameters — genParam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) ans = genParam(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarA.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive genic variance — genicVarA","title":"Additive genic variance — genicVarA","text":"Returns additive genic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive genic variance — genicVarA","text":"","code":"genicVarA(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive genic variance — genicVarA","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive genic variance — genicVarA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) genicVarA(pop, simParam=SP) #>   Trait1  #> 1.493479"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarAA.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive-by-additive genic variance — genicVarAA","title":"Additive-by-additive genic variance — genicVarAA","text":"Returns additive--additive epistatic genic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarAA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive-by-additive genic variance — genicVarAA","text":"","code":"genicVarAA(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarAA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive-by-additive genic variance — genicVarAA","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarAA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive-by-additive genic variance — genicVarAA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) genicVarAA(pop, simParam=SP) #> Trait1  #>      0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarD.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominance genic variance — genicVarD","title":"Dominance genic variance — genicVarD","text":"Returns dominance genic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominance genic variance — genicVarD","text":"","code":"genicVarD(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominance genic variance — genicVarD","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominance genic variance — genicVarD","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) genicVarD(pop, simParam=SP) #>    Trait1  #> 0.1062764"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarG.html","id":null,"dir":"Reference","previous_headings":"","what":"Total genic variance — genicVarG","title":"Total genic variance — genicVarG","text":"Returns total genic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total genic variance — genicVarG","text":"","code":"genicVarG(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total genic variance — genicVarG","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/genicVarG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total genic variance — genicVarG","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) genicVarG(pop, simParam=SP) #>   Trait1  #> 2.357611"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getGenMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genetic map — getGenMap","title":"Get genetic map — getGenMap","text":"Retrieves genetic map loci.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getGenMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genetic map — getGenMap","text":"","code":"getGenMap(object = NULL, sex = \"A\")"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getGenMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genetic map — getGenMap","text":"object retrieve genetic map. Can object SimParam MapPop-class. NULL, function look SimParam object called \"SP\" global environment. sex determines sex specific map returned. Options \"\" average map, \"F\" female map, \"M\" male map. options equivalent using sex specific maps using pulling MapPop.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getGenMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genetic map — getGenMap","text":"Returns data.frame : id Unique identifier locus chr Chromosome containing locus pos Genetic map position","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getGenMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genetic map — getGenMap","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters getGenMap(founderPop) #>      id chr       pos #> 1   1_1   1 0.0000000 #> 2   1_2   1 0.1111111 #> 3   1_3   1 0.2222222 #> 4   1_4   1 0.3333333 #> 5   1_5   1 0.4444444 #> 6   1_6   1 0.5555556 #> 7   1_7   1 0.6666667 #> 8   1_8   1 0.7777778 #> 9   1_9   1 0.8888889 #> 10 1_10   1 1.0000000"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getNumThreads.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of available threads — getNumThreads","title":"Number of available threads — getNumThreads","text":"Gets number available threads calling OpenMP function omp_get_max_threads()","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getNumThreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of available threads — getNumThreads","text":"","code":"getNumThreads()"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getNumThreads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of available threads — getNumThreads","text":"integer","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getNumThreads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of available threads — getNumThreads","text":"","code":"getNumThreads() #> [1] 4"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pedigree — getPed","title":"Get pedigree — getPed","text":"Returns population's pedigree stored id, mother father slots. NULL returned input population lacks required.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pedigree — getPed","text":"","code":"getPed(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pedigree — getPed","text":"pop population","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getPed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pedigree — getPed","text":"","code":"# Create a founder population founderPop = quickHaplo(2,1,2)  # Set simulation parameters SP = SimParam$new(founderPop)  # Create a population pop = newPop(founderPop, simParam=SP)  # Get the pedigree getPed(pop) #>   id mother father #> 1  1      0      0 #> 2  2      0      0  # Returns NULL when a population lacks a pedigree getPed(founderPop) #> NULL"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getQtlMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get QTL genetic map — getQtlMap","title":"Get QTL genetic map — getQtlMap","text":"Retrieves genetic map QTL given trait.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getQtlMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get QTL genetic map — getQtlMap","text":"","code":"getQtlMap(trait = 1, sex = \"A\", simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getQtlMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get QTL genetic map — getQtlMap","text":"trait integer sex determines sex specific map returned. Options \"\" average map, \"F\" female map, \"M\" male map. options equivalent using sex specific maps. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getQtlMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get QTL genetic map — getQtlMap","text":"Returns data.frame : id Unique identifier QTL chr Chromosome containing QTL site Segregating site chromosome pos Genetic map position","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getQtlMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get QTL genetic map — getQtlMap","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(5)  #Pull SNP map getQtlMap(trait=1, simParam=SP) #>      id chr site       pos #> 1_2 1_2   1    2 0.1111111 #> 1_3 1_3   1    3 0.2222222 #> 1_5 1_5   1    5 0.4444444 #> 1_6 1_6   1    6 0.5555556 #> 1_9 1_9   1    9 0.8888889"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getSnpMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNP genetic map — getSnpMap","title":"Get SNP genetic map — getSnpMap","text":"Retrieves genetic map given SNP chip.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getSnpMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNP genetic map — getSnpMap","text":"","code":"getSnpMap(snpChip = 1, sex = \"A\", simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getSnpMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNP genetic map — getSnpMap","text":"snpChip integer. Indicates SNP chip's map retrieve. sex determines sex specific map returned. Options \"\" average map, \"F\" female map, \"M\" male map. options equivalent using sex specific maps. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getSnpMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SNP genetic map — getSnpMap","text":"Returns data.frame : id Unique identifier SNP chr Chromosome containing SNP site Segregating site chromosome pos Genetic map position","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/getSnpMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SNP genetic map — getSnpMap","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addSnpChip(5)  #Pull SNP map getSnpMap(snpChip=1, simParam=SP) #>      id chr site       pos #> 1_1 1_1   1    1 0.0000000 #> 1_3 1_3   1    3 0.2222222 #> 1_5 1_5   1    5 0.4444444 #> 1_7 1_7   1    7 0.6666667 #> 1_9 1_9   1    9 0.8888889"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/gv.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic value — gv","title":"Genetic value — gv","text":"wrapper accessing gv slot","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/gv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic value — gv","text":"","code":"gv(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/gv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic value — gv","text":"pop Pop-class similar object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/gv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genetic value — gv","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) gv(pop) #>            Trait1 #>  [1,] -2.58339534 #>  [2,]  1.25508707 #>  [3,]  1.02770019 #>  [4,]  1.01099201 #>  [5,] -0.14283056 #>  [6,]  0.58752628 #>  [7,]  0.07068035 #>  [8,] -0.92537542 #>  [9,] -0.45390915 #> [10,]  0.15352457"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/hybridCross.html","id":null,"dir":"Reference","previous_headings":"","what":"Hybrid crossing — hybridCross","title":"Hybrid crossing — hybridCross","text":"convenient function hybrid plant breeding simulations. Allows easy specification test cross scheme /creation object HybridPop-class. Note HybridPop-class used parents created using makeDH function newPop using inbred founders. id new individuals [mother_id]_[father_id]","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/hybridCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hybrid crossing — hybridCross","text":"","code":"hybridCross(   females,   males,   crossPlan = \"testcross\",   returnHybridPop = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/hybridCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hybrid crossing — hybridCross","text":"females female population, object Pop-class males male population, object Pop-class crossPlan either \"testcross\" possible combinations matrix two columns designed crosses returnHybridPop results returned HybridPop-class. false returns results Pop-class. Population must fully inbred TRUE. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/hybridCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hybrid crossing — hybridCross","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Make crosses for full diallele pop2 = hybridCross(pop, pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importGenMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Import genetic map — importGenMap","title":"Import genetic map — importGenMap","text":"Formats genetic map stored data.frame AlphaSimR's internal format. Map positions must Morgans.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importGenMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import genetic map — importGenMap","text":"","code":"importGenMap(genMap)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importGenMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import genetic map — importGenMap","text":"genMap genetic map data.frame. first three columns must : marker name, chromosome, map position (Morgans). Marker name chromosome coerced using .character.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importGenMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import genetic map — importGenMap","text":"list named vectors","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importGenMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import genetic map — importGenMap","text":"","code":"genMap = data.frame(markerName=letters[1:5],                     chromosome=c(1,1,1,2,2),                     position=c(0,0.5,1,0.15,0.4))  asrMap = importGenMap(genMap=genMap)  str(asrMap) #> List of 2 #>  $ 1: Named num [1:3] 0 0.5 1 #>   ..- attr(*, \"names\")= chr [1:3] \"a\" \"b\" \"c\" #>  $ 2: Named num [1:2] 0 0.25 #>   ..- attr(*, \"names\")= chr [1:2] \"d\" \"e\""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Import haplotypes — importHaplo","title":"Import haplotypes — importHaplo","text":"Formats haplotype matrix format AlphaSimR population can used initialize simulation. function serves wrapper newMapPop utilizes user friendly input format.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import haplotypes — importHaplo","text":"","code":"importHaplo(haplo, genMap, ploidy = 2L, ped = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import haplotypes — importHaplo","text":"haplo matrix haplotypes genMap genetic map data.frame. first three columns must : marker name, chromosome, map position (Morgans). Marker name chromosome coerced using .character. See importGenMap ploidy ploidy level organism ped optional pedigree supplied genotypes. See details.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import haplotypes — importHaplo","text":"MapPop-class ped NULL, otherwise NamedMapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import haplotypes — importHaplo","text":"optional pedigree can data.frame, matrix vector. object data.frame matrix, first three columns must include information following order: id, mother, father. values coerced using .character. object vector, assumed include id. case, mother father set \"0\" individuals.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import haplotypes — importHaplo","text":"","code":"haplo = rbind(c(1,1,0,1,0),               c(1,1,0,1,0),               c(0,1,1,0,0),               c(0,1,1,0,0)) colnames(haplo) = letters[1:5]  genMap = data.frame(markerName=letters[1:5],                     chromosome=c(1,1,1,2,2),                     position=c(0,0.5,1,0.15,0.4))  ped = data.frame(id=c(\"a\",\"b\"),                  mother=c(0,0),                  father=c(0,0))  founderPop = importHaplo(haplo=haplo,                           genMap=genMap,                          ploidy=2L,                          ped=ped)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Import inbred, diploid genotypes — importInbredGeno","title":"Import inbred, diploid genotypes — importInbredGeno","text":"Formats genotypes inbred, diploid lines AlphaSimR population can used initialize simulation. attempt made automatically detect 0,1,2 -1,0,1 genotype coding. Heterozygotes probabilistic genotypes allowed, coerced nearest homozygote. Pedigree information optional provided passed population easier identification simulation.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import inbred, diploid genotypes — importInbredGeno","text":"","code":"importInbredGeno(geno, genMap, ped = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import inbred, diploid genotypes — importInbredGeno","text":"geno matrix genotypes genMap genetic map data.frame. first three columns must : marker name, chromosome, map position (Morgans). Marker name chromosome coerced using .character. See importGenMap ped optional pedigree supplied genotypes. See details.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import inbred, diploid genotypes — importInbredGeno","text":"MapPop-class ped NULL, otherwise NamedMapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import inbred, diploid genotypes — importInbredGeno","text":"optional pedigree can data.frame, matrix vector. object data.frame matrix, first three columns must include information following order: id, mother, father. values coerced using .character. object vector, assumed include id. case, mother father set \"0\" individuals.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/importInbredGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import inbred, diploid genotypes — importInbredGeno","text":"","code":"geno = rbind(c(2,2,0,2,0),              c(0,2,2,0,0)) colnames(geno) = letters[1:5]  genMap = data.frame(markerName=letters[1:5],                     chromosome=c(1,1,1,2,2),                     position=c(0,0.5,1,0.15,0.4))  ped = data.frame(id=c(\"a\",\"b\"),                  mother=c(0,0),                  father=c(0,0))  founderPop = importInbredGeno(geno=geno,                               genMap=genMap,                               ped=ped)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if individuals of a population are female or male — isFemale","title":"Test if individuals of a population are female or male — isFemale","text":"Test individuals population female male","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if individuals of a population are female or male — isFemale","text":"","code":"isFemale(x)  isMale(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if individuals of a population are female or male — isFemale","text":"x Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if individuals of a population are female or male — isFemale","text":"logical","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Test if individuals of a population are female or male — isFemale","text":"isMale(): Test individuals population female male","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isFemale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if individuals of a population are female or male — isFemale","text":"","code":"founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100) SP <- SimParam$new(founderGenomes) SP$setSexes(sexes = \"yes_sys\") pop <- newPop(founderGenomes) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found  isFemale(pop) #> Error: object 'pop' not found isMale(pop) #> Error: object 'pop' not found  pop[isFemale(pop)] #> Error: object 'pop' not found pop[isFemale(pop)]@sex #> Error: object 'pop' not found"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if object is of a Population class — isPop","title":"Test if object is of a Population class — isPop","text":"Utilify function test object Population class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if object is of a Population class — isPop","text":"","code":"isPop(x)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if object is of a Population class — isPop","text":"x Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/isPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if object is of a Population class — isPop","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP) isPop(pop) #> [1] TRUE isPop(SP) #> [1] FALSE"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross.html","id":null,"dir":"Reference","previous_headings":"","what":"Make designed crosses — makeCross","title":"Make designed crosses — makeCross","text":"Makes crosses within population using user supplied crossing plan.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make designed crosses — makeCross","text":"","code":"makeCross(pop, crossPlan, nProgeny = 1, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make designed crosses — makeCross","text":"pop object Pop-class crossPlan matrix two column representing female male parents. Either integers position population character strings IDs. nProgeny number progeny per cross simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make designed crosses — makeCross","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make designed crosses — makeCross","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Cross individual 1 with individual 10 crossPlan = matrix(c(1,10), nrow=1, ncol=2) pop2 = makeCross(pop, crossPlan, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross2.html","id":null,"dir":"Reference","previous_headings":"","what":"Make designed crosses — makeCross2","title":"Make designed crosses — makeCross2","text":"Makes crosses two populations using user supplied crossing plan.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make designed crosses — makeCross2","text":"","code":"makeCross2(females, males, crossPlan, nProgeny = 1, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make designed crosses — makeCross2","text":"females object Pop-class female parents. males object Pop-class male parents. crossPlan matrix two column representing female male parents. Either integers position population character strings IDs. nProgeny number progeny per cross simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make designed crosses — makeCross2","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeCross2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make designed crosses — makeCross2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Cross individual 1 with individual 10 crossPlan = matrix(c(1,10), nrow=1, ncol=2) pop2 = makeCross2(pop, pop, crossPlan, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeDH.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates DH lines — makeDH","title":"Generates DH lines — makeDH","text":"Creates DH lines individual population. works diploid individuals. polyploids, use reduceGenome doubleGenome.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeDH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates DH lines — makeDH","text":"","code":"makeDH(pop, nDH = 1, useFemale = TRUE, keepParents = TRUE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeDH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates DH lines — makeDH","text":"pop object 'Pop' superclass nDH total number DH lines per individual useFemale female recombination rates used. keepParents previous parents used mother father. simParam object 'SimParam' class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeDH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates DH lines — makeDH","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/makeDH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates DH lines — makeDH","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Create 1 DH for each individual pop2 = makeDH(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mapLoci.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds positions of loci by marker name — mapLoci","title":"Finds positions of loci by marker name — mapLoci","text":"Used generate lociPerChr lociLoc objects set markers. objects can passed functions pulling genotypes haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mapLoci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds positions of loci by marker name — mapLoci","text":"","code":"mapLoci(markers, genMap)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mapLoci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds positions of loci by marker name — mapLoci","text":"markers vector marker names genMap genetic map AlphaSimR's internal genetic map format","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mapLoci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds positions of loci by marker name — mapLoci","text":"list containing lociPerChr lociLoc can ","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanEBV.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean estimated breeding values — meanEBV","title":"Mean estimated breeding values — meanEBV","text":"Returns mean estimated breeding values traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanEBV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean estimated breeding values — meanEBV","text":"","code":"meanEBV(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanEBV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean estimated breeding values — meanEBV","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanEBV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean estimated breeding values — meanEBV","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) trtH2 = 0.5 SP$setVarE(h2=trtH2)  #Create population pop = newPop(founderPop, simParam=SP) pop@ebv = trtH2 * (pop@pheno - meanP(pop)) #ind performance based EBV meanEBV(pop) #>       Trait1  #> 1.387779e-17"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanG.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean genetic values — meanG","title":"Mean genetic values — meanG","text":"Returns mean genetic values traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean genetic values — meanG","text":"","code":"meanG(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean genetic values — meanG","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean genetic values — meanG","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) meanG(pop) #>       Trait1  #> 5.551115e-18"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanP.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean phenotypic values — meanP","title":"Mean phenotypic values — meanP","text":"Returns mean phenotypic values traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean phenotypic values — meanP","text":"","code":"meanP(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean phenotypic values — meanP","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/meanP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean phenotypic values — meanP","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) meanP(pop) #>    Trait1  #> 0.4424567"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergeGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine genomes of individuals — mergeGenome","title":"Combine genomes of individuals — mergeGenome","text":"function designed model pairing gametes. male female individuals treated gametes, ploidy newly created individuals sum parents.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergeGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine genomes of individuals — mergeGenome","text":"","code":"mergeGenome(females, males, crossPlan, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergeGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine genomes of individuals — mergeGenome","text":"females object Pop-class female parents. males object Pop-class male parents. crossPlan matrix two column representing female male parents. Either integers position population character strings IDs. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergeGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine genomes of individuals — mergeGenome","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergeGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine genomes of individuals — mergeGenome","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Cross individual 1 with individual 10 crossPlan = matrix(c(1,10), nrow=1, ncol=2) pop2 = mergeGenome(pop, pop, crossPlan, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergePops.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of populations — mergePops","title":"Merge list of populations — mergePops","text":"Rapidly merges list populations single population","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergePops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of populations — mergePops","text":"","code":"mergePops(popList)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergePops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of populations — mergePops","text":"popList list containing Pop-class elements MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergePops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of populations — mergePops","text":"Returns Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mergePops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge list of populations — mergePops","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create a list of populations and merge list pop = newPop(founderPop, simParam=SP) pop@misc$tmp = rnorm(n=10) pop@misc$tmp2 = rnorm(n=10)  popList = list(pop, pop) pop2 = mergePops(popList)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Random Mutations — mutate","title":"Add Random Mutations — mutate","text":"Adds random mutations individuals population. Note existing phenotypes EBVs kept. Thus, user need run setPheno /setEBV generate new phenotypes EBVs reflect changes introduced new mutations.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Random Mutations — mutate","text":"","code":"mutate(pop, mutRate = 2.5e-08, returnPos = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Random Mutations — mutate","text":"pop object Pop-class mutRate rate new mutations returnPos positions mutations returned simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Random Mutations — mutate","text":"object Pop-class returnPos=FALSE list containing Pop-class data.frame containing postions mutations returnPos=TRUE","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Random Mutations — mutate","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Introduce mutations pop = mutate(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/nInd.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of individuals — nInd","title":"Number of individuals — nInd","text":"wrapper accessing nInd slot","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/nInd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of individuals — nInd","text":"","code":"nInd(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/nInd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of individuals — nInd","text":"pop Pop-class similar object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/nInd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of individuals — nInd","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) nInd(pop) #> [1] 10"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newEmptyPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an empty population — newEmptyPop","title":"Creates an empty population — newEmptyPop","text":"Creates empty Pop-class object user defined ploidy parameters taken simParam.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newEmptyPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an empty population — newEmptyPop","text":"","code":"newEmptyPop(ploidy = 2L, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newEmptyPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an empty population — newEmptyPop","text":"ploidy ploidy population simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newEmptyPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an empty population — newEmptyPop","text":"Returns object Pop-class zero individuals","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newEmptyPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an empty population — newEmptyPop","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create empty population pop = newEmptyPop(simParam=SP) isPop(pop) #> [1] TRUE"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":null,"dir":"Reference","previous_headings":"","what":"New MapPop — newMapPop","title":"New MapPop — newMapPop","text":"Creates new MapPop-class user supplied genetic maps haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New MapPop — newMapPop","text":"","code":"newMapPop(genMap, haplotypes, inbred = FALSE, ploidy = 2L)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New MapPop — newMapPop","text":"genMap list genetic maps haplotypes list matrices data.frames can coerced matrices. See details. inbred individuals fully inbred ploidy ploidy level organism","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New MapPop — newMapPop","text":"object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"New MapPop — newMapPop","text":"item genMap must vector ordered genetic lengths Morgans. first value must zero. length vector determines number segregating sites chromosome. item haplotypes must coercible matrix. columns matrix correspond segregating sites. number rows must match number individuals times ploidy using inbred=FALSE. using inbred=TRUE, number rows must equal number individuals. haplotypes can stored numeric, integer raw. underlying C++ function use raw.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMapPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New MapPop — newMapPop","text":"","code":"# Create genetic map for two chromosomes, each 1 Morgan long # Each chromosome contains 11 equally spaced segregating sites genMap = list(seq(0,1,length.out=11),                seq(0,1,length.out=11))  # Create haplotypes for 10 outbred individuals chr1 = sample(x=0:1,size=20*11,replace=TRUE) chr1 = matrix(chr1,nrow=20,ncol=11) chr2 = sample(x=0:1,size=20*11,replace=TRUE) chr2 = matrix(chr2,nrow=20,ncol=11) haplotypes = list(chr1,chr2)  founderPop = newMapPop(genMap=genMap, haplotypes=haplotypes)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMultiPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new Multi Population — newMultiPop","title":"Create new Multi Population — newMultiPop","text":"Creates new MultiPop-class one Pop-class /MultiPop-class objects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMultiPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new Multi Population — newMultiPop","text":"","code":"newMultiPop(...)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMultiPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new Multi Population — newMultiPop","text":"... one Pop-class /MultiPop-class objects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMultiPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new Multi Population — newMultiPop","text":"Returns object MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newMultiPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new Multi Population — newMultiPop","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP) megaPop = newMultiPop(pop=pop) isMultiPop(megaPop) #> [1] TRUE"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new population — newPop","title":"Create new population — newPop","text":"Creates initial Pop-class object MapPop-class NamedMapPop-class. function intended use output functions runMacs, newMapPop, quickHaplo.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new population — newPop","text":"","code":"newPop(rawPop, simParam = NULL, ...)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new population — newPop","text":"rawPop object MapPop-class NamedMapPop-class simParam object SimParam ... additional arguments used internally","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new population — newPop","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new population — newPop","text":"Note newPop takes genomes   rawPop uses without recombination! Hence,   call newPop(rawPop = founderGenomes) twice, get   two sets individuals different id genomes.   get genetically different sets individuals can subset   rawPop input, say first half one set second half   set.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/newPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new population — newPop","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP) isPop(pop) #> [1] TRUE  #Misc pop@misc$tmp1 = rnorm(n=2) pop@misc$tmp2 = rnorm(n=2)  #MiscPop pop@miscPop$tmp1 = sum(pop@misc$tmp1) pop@miscPop$tmp2 = sum(pop@misc$tmp2)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pedigreeCross.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedigree cross — pedigreeCross","title":"Pedigree cross — pedigreeCross","text":"Creates Pop-class generic pedigree set founder individuals. way user supplied pedigree used depends value matchID. matchID TRUE, IDs user supplied pedigree matched founderNames. matchID FALSE, founder individuals user supplied pedigree randomly sampled founderPop.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pedigreeCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedigree cross — pedigreeCross","text":"","code":"pedigreeCross(   founderPop,   id,   mother,   father,   matchID = FALSE,   maxCycle = 100,   DH = NULL,   nSelf = NULL,   useFemale = TRUE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pedigreeCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pedigree cross — pedigreeCross","text":"founderPop Pop-class id vector unique identifiers individuals pedigree. values IDs seperate IDs founderPop matchID=FALSE. mother vector identifiers mothers individuals pedigree. Must match one elements id vector treated unknown. father vector identifiers fathers individuals pedigree. Must match one elements id vector treated unknown. matchID indicates IDs founderPop matched id argument. See details. maxCycle maximum number loops make pedigree sort . DH optional vector indicating individual made doubled haploid. nSelf optional vector indicating many generations individual selfed. useFemale creating DH lines, female recombination rates used. parameter effect , recombRatio=1. simParam object 'SimParam' class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pedigreeCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pedigree cross — pedigreeCross","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Pedigree for a biparental cross with 7 generations of selfing id = 1:10 mother = c(0,0,1,3:9) father = c(0,0,2,3:9) pop2 = pedigreeCross(pop, id, mother, father, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Phenotype — pheno","title":"Phenotype — pheno","text":"wrapper accessing pheno slot","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phenotype — pheno","text":"","code":"pheno(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pheno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phenotype — pheno","text":"pop Pop-class similar object","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pheno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phenotype — pheno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) pheno(pop) #>            Trait1 #>  [1,] -3.51116610 #>  [2,] -0.73397633 #>  [3,]  1.01535686 #>  [4,]  1.97838841 #>  [5,]  0.11534796 #>  [6,] -1.02702029 #>  [7,]  0.20199422 #>  [8,]  0.11105682 #>  [9,] -0.68999237 #> [10,] -0.04974391"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/popVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Population variance — popVar","title":"Population variance — popVar","text":"Calculates population variance matrix opposed sample variance matrix calculated var. .e. divides n instead n-1","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/popVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population variance — popVar","text":"","code":"popVar(X)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/popVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population variance — popVar","text":"X n m matrix","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/popVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population variance — popVar","text":"m m variance-covariance matrix","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullIbdHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull IBD haplotypes — pullIbdHaplo","title":"Pull IBD haplotypes — pullIbdHaplo","text":"Retrieves IBD haplotype data","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullIbdHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull IBD haplotypes — pullIbdHaplo","text":"","code":"pullIbdHaplo(pop, chr = NULL, snpChip = NULL, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullIbdHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull IBD haplotypes — pullIbdHaplo","text":"pop object Pop-class chr vector chromosomes retrieve. NULL, chromosomes retrieved. snpChip integer indicating SNP array loci retrieved. NULL, sites retrieved. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullIbdHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull IBD haplotypes — pullIbdHaplo","text":"Returns matrix IBD haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullIbdHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull IBD haplotypes — pullIbdHaplo","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5) SP$setTrackRec(TRUE)  #Create population pop = newPop(founderPop, simParam=SP) pullIbdHaplo(pop, simParam=SP) #>      1_1 1_2 1_3 1_4 1_5 1_6 1_7 1_8 1_9 1_10 1_11 1_12 1_13 1_14 1_15 #> 1_1    1   1   1   1   1   1   1   1   1    1    1    1    1    1    1 #> 1_2    2   2   2   2   2   2   2   2   2    2    2    2    2    2    2 #> 2_1    3   3   3   3   3   3   3   3   3    3    3    3    3    3    3 #> 2_2    4   4   4   4   4   4   4   4   4    4    4    4    4    4    4 #> 3_1    5   5   5   5   5   5   5   5   5    5    5    5    5    5    5 #> 3_2    6   6   6   6   6   6   6   6   6    6    6    6    6    6    6 #> 4_1    7   7   7   7   7   7   7   7   7    7    7    7    7    7    7 #> 4_2    8   8   8   8   8   8   8   8   8    8    8    8    8    8    8 #> 5_1    9   9   9   9   9   9   9   9   9    9    9    9    9    9    9 #> 5_2   10  10  10  10  10  10  10  10  10   10   10   10   10   10   10 #> 6_1   11  11  11  11  11  11  11  11  11   11   11   11   11   11   11 #> 6_2   12  12  12  12  12  12  12  12  12   12   12   12   12   12   12 #> 7_1   13  13  13  13  13  13  13  13  13   13   13   13   13   13   13 #> 7_2   14  14  14  14  14  14  14  14  14   14   14   14   14   14   14 #> 8_1   15  15  15  15  15  15  15  15  15   15   15   15   15   15   15 #> 8_2   16  16  16  16  16  16  16  16  16   16   16   16   16   16   16 #> 9_1   17  17  17  17  17  17  17  17  17   17   17   17   17   17   17 #> 9_2   18  18  18  18  18  18  18  18  18   18   18   18   18   18   18 #> 10_1  19  19  19  19  19  19  19  19  19   19   19   19   19   19   19 #> 10_2  20  20  20  20  20  20  20  20  20   20   20   20   20   20   20"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull marker genotypes — pullMarkerGeno","title":"Pull marker genotypes — pullMarkerGeno","text":"Retrieves genotype data user specified loci","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull marker genotypes — pullMarkerGeno","text":"","code":"pullMarkerGeno(pop, markers, asRaw = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull marker genotypes — pullMarkerGeno","text":"pop object RawPop-class MapPop-class markers character vector. Indicates names loci retrieved. asRaw return raw (byte) format simParam object SimParam, used pop MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull marker genotypes — pullMarkerGeno","text":"Returns matrix genotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull marker genotypes — pullMarkerGeno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP)  #Pull genotype data for first two markers on chromosome one. #Marker name is consistent with default naming in AlphaSimR. pullMarkerGeno(pop, markers=c(\"1_1\",\"1_2\"), simParam=SP) #>    1_1 1_2 #> 1    2   0 #> 2    2   1 #> 3    2   1 #> 4    1   1 #> 5    1   2 #> 6    0   1 #> 7    1   0 #> 8    2   0 #> 9    2   0 #> 10   2   0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull marker haplotypes — pullMarkerHaplo","title":"Pull marker haplotypes — pullMarkerHaplo","text":"Retrieves haplotype data user specified loci","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull marker haplotypes — pullMarkerHaplo","text":"","code":"pullMarkerHaplo(pop, markers, haplo = \"all\", asRaw = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull marker haplotypes — pullMarkerHaplo","text":"pop object RawPop-class MapPop-class markers character vector. Indicates names loci retrieved haplo either \"\" haplotypes integer single set haplotypes. Use value 1 female haplotypes value 2 male haplotypes diploids. asRaw return raw (byte) format simParam object SimParam, used pop MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull marker haplotypes — pullMarkerHaplo","text":"Returns matrix genotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullMarkerHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull marker haplotypes — pullMarkerHaplo","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5) SP$setTrackRec(TRUE)  #Create population pop = newPop(founderPop, simParam=SP)  #Pull haplotype data for first two markers on chromosome one. #Marker name is consistent with default naming in AlphaSimR. pullMarkerHaplo(pop, markers=c(\"1_1\",\"1_2\"), simParam=SP) #>      1_1 1_2 #> 1_1    1   0 #> 1_2    0   1 #> 2_1    1   0 #> 2_2    1   1 #> 3_1    0   0 #> 3_2    1   0 #> 4_1    0   0 #> 4_2    0   0 #> 5_1    0   0 #> 5_2    1   0 #> 6_1    1   0 #> 6_2    0   1 #> 7_1    0   0 #> 7_2    0   1 #> 8_1    1   1 #> 8_2    1   1 #> 9_1    0   1 #> 9_2    0   0 #> 10_1   0   1 #> 10_2   1   0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull QTL genotypes — pullQtlGeno","title":"Pull QTL genotypes — pullQtlGeno","text":"Retrieves QTL genotype data","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull QTL genotypes — pullQtlGeno","text":"","code":"pullQtlGeno(pop, trait = 1, chr = NULL, asRaw = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull QTL genotypes — pullQtlGeno","text":"pop object Pop-class trait integer. Indicates trait's QTL genotypes retrieve. chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull QTL genotypes — pullQtlGeno","text":"Returns matrix QTL genotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull QTL genotypes — pullQtlGeno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullQtlGeno(pop, simParam=SP) #>    1_1 1_2 1_4 1_5 1_6 1_7 1_8 1_11 1_12 1_13 #> 1    2   0   1   0   2   1   1    1    2    1 #> 2    1   1   1   2   1   2   2    1    0    0 #> 3    1   0   1   2   1   2   2    0    1    0 #> 4    1   2   1   1   0   2   0    1    0    1 #> 5    0   1   0   0   2   1   1    1    0    1 #> 6    1   1   0   1   0   0   1    2    1    0 #> 7    1   2   2   1   1   0   1    1    1    1 #> 8    1   0   0   1   1   2   1    1    2    2 #> 9    1   0   0   1   1   0   0    2    1    1 #> 10   1   1   0   2   1   2   0    2    0    1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull QTL haplotypes — pullQtlHaplo","title":"Pull QTL haplotypes — pullQtlHaplo","text":"Retrieves QTL haplotype data","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull QTL haplotypes — pullQtlHaplo","text":"","code":"pullQtlHaplo(   pop,   trait = 1,   haplo = \"all\",   chr = NULL,   asRaw = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull QTL haplotypes — pullQtlHaplo","text":"pop object Pop-class trait integer. Indicates trait's QTL haplotypes retrieve. haplo either \"\" haplotypes integer single set haplotypes. Use value 1 female haplotypes value 2 male haplotypes diploids. chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull QTL haplotypes — pullQtlHaplo","text":"Returns matrix QTL haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullQtlHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull QTL haplotypes — pullQtlHaplo","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullQtlHaplo(pop, simParam=SP) #>      1_1 1_3 1_7 1_8 1_10 1_11 1_12 1_13 1_14 1_15 #> 1_1    1   1   0   0    0    0    1    0    1    0 #> 1_2    1   1   1   1    1    1    0    0    1    1 #> 2_1    0   1   1   1    0    0    0    0    0    0 #> 2_2    0   0   1   0    0    0    1    1    1    1 #> 3_1    0   0   0   0    0    0    1    1    0    1 #> 3_2    0   1   0   0    0    1    0    0    0    1 #> 4_1    1   1   0   0    1    1    0    0    0    1 #> 4_2    0   0   0   0    0    0    1    1    1    0 #> 5_1    0   1   0   0    1    0    1    1    1    1 #> 5_2    0   0   1   0    0    1    1    1    0    0 #> 6_1    0   1   0   0    0    1    0    0    0    1 #> 6_2    1   1   0   0    0    0    1    1    0    0 #> 7_1    1   1   0   0    1    1    0    1    1    1 #> 7_2    1   0   1   0    1    1    0    0    1    0 #> 8_1    0   1   0   1    1    1    0    1    1    0 #> 8_2    1   0   1   1    0    0    0    0    0    1 #> 9_1    1   0   0   0    0    1    1    0    1    1 #> 9_2    1   0   1   1    0    1    1    1    0    1 #> 10_1   0   1   0   0    1    0    1    0    1    1 #> 10_2   1   0   1   0    1    0    0    0    1    1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull segregating site genotypes — pullSegSiteGeno","title":"Pull segregating site genotypes — pullSegSiteGeno","text":"Retrieves genotype data segregating sites","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull segregating site genotypes — pullSegSiteGeno","text":"","code":"pullSegSiteGeno(pop, chr = NULL, asRaw = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull segregating site genotypes — pullSegSiteGeno","text":"pop object RawPop-class MapPop-class chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam, used pop MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull segregating site genotypes — pullSegSiteGeno","text":"Returns matrix genotypes","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull segregating site genotypes — pullSegSiteGeno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullSegSiteGeno(pop, simParam=SP) #>    1_1 1_2 1_3 1_4 1_5 1_6 1_7 1_8 1_9 1_10 1_11 1_12 1_13 1_14 1_15 #> 1    0   1   1   1   1   1   0   1   0    1    2    0    1    0    1 #> 2    1   1   1   1   1   1   2   0   1    1    1    1    2    1    1 #> 3    0   1   2   0   1   0   1   1   1    1    1    1    1    1    1 #> 4    0   0   0   1   1   0   0   1   0    2    0    2    1    1    1 #> 5    0   1   0   1   2   0   2   1   1    2    2    1    2    1    2 #> 6    1   2   1   2   2   2   1   1   0    1    1    2    0    0    2 #> 7    2   1   0   1   0   0   1   0   1    0    0    0    1    1    0 #> 8    0   1   1   1   1   1   0   0   2    2    1    2    1    2    2 #> 9    1   1   1   2   0   1   0   1   1    2    0    1    1    1    2 #> 10   1   1   2   0   0   0   1   1   0    1    0    0    0    0    1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull seg site haplotypes — pullSegSiteHaplo","title":"Pull seg site haplotypes — pullSegSiteHaplo","text":"Retrieves haplotype data segregating sites","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull seg site haplotypes — pullSegSiteHaplo","text":"","code":"pullSegSiteHaplo(   pop,   haplo = \"all\",   chr = NULL,   asRaw = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull seg site haplotypes — pullSegSiteHaplo","text":"pop object RawPop-class MapPop-class haplo either \"\" haplotypes integer single set haplotypes. Use value 1 female haplotypes value 2 male haplotypes diploids. chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam, used pop MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull seg site haplotypes — pullSegSiteHaplo","text":"Returns matrix haplotypes","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSegSiteHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull seg site haplotypes — pullSegSiteHaplo","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullSegSiteHaplo(pop, simParam=SP) #>      1_1 1_2 1_3 1_4 1_5 1_6 1_7 1_8 1_9 1_10 1_11 1_12 1_13 1_14 1_15 #> 1_1    0   0   0   0   1   1   0   1   0    0    0    0    0    1    1 #> 1_2    0   1   1   0   0   1   0   0   0    1    0    1    1    1    1 #> 2_1    0   0   0   1   0   0   1   0   1    1    0    1    1    1    1 #> 2_2    1   1   0   0   0   0   0   1   0    0    0    1    1    0    0 #> 3_1    1   1   1   0   0   1   1   1   1    0    0    0    1    0    1 #> 3_2    0   0   0   0   0   0   0   0   1    1    0    0    0    1    1 #> 4_1    1   1   1   0   1   1   1   1   1    0    0    1    1    1    0 #> 4_2    0   1   0   1   0   1   0   0   0    1    0    0    1    0    0 #> 5_1    1   0   1   1   1   1   1   0   1    0    0    1    1    1    1 #> 5_2    1   0   1   1   0   1   0   1   0    1    1    1    0    0    0 #> 6_1    0   0   0   0   0   0   0   0   0    1    0    0    0    1    0 #> 6_2    0   1   0   1   1   1   1   0   0    1    1    1    0    1    0 #> 7_1    1   1   0   0   1   0   1   0   0    0    0    1    0    0    1 #> 7_2    0   1   0   0   1   1   0   1   0    1    1    0    1    0    0 #> 8_1    0   1   0   0   1   0   0   0   1    0    1    1    0    0    1 #> 8_2    1   1   1   0   1   0   0   0   1    1    0    0    0    1    0 #> 9_1    0   0   0   0   1   0   0   1   1    0    1    1    1    0    0 #> 9_2    1   0   1   0   0   1   0   1   1    1    1    1    0    0    1 #> 10_1   1   1   0   1   1   1   1   0   0    1    0    0    0    0    1 #> 10_2   1   0   1   1   1   0   1   0   0    1    1    0    1    0    0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull SNP genotypes — pullSnpGeno","title":"Pull SNP genotypes — pullSnpGeno","text":"Retrieves SNP genotype data","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull SNP genotypes — pullSnpGeno","text":"","code":"pullSnpGeno(pop, snpChip = 1, chr = NULL, asRaw = FALSE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull SNP genotypes — pullSnpGeno","text":"pop object Pop-class snpChip integer. Indicates SNP chip's genotypes retrieve. chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull SNP genotypes — pullSnpGeno","text":"Returns matrix SNP genotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull SNP genotypes — pullSnpGeno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullSnpGeno(pop, simParam=SP) #>    1_7 1_9 1_11 1_12 1_15 #> 1    1   0    2    1    1 #> 2    1   0    0    1    0 #> 3    0   1    1    2    0 #> 4    0   1    2    1    1 #> 5    1   0    1    2    1 #> 6    1   1    1    2    2 #> 7    0   0    0    1    0 #> 8    1   1    2    0    2 #> 9    1   2    2    0    1 #> 10   1   0    2    1    2"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull SNP haplotypes — pullSnpHaplo","title":"Pull SNP haplotypes — pullSnpHaplo","text":"Retrieves SNP haplotype data","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull SNP haplotypes — pullSnpHaplo","text":"","code":"pullSnpHaplo(   pop,   snpChip = 1,   haplo = \"all\",   chr = NULL,   asRaw = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull SNP haplotypes — pullSnpHaplo","text":"pop object Pop-class snpChip integer. Indicates SNP chip's haplotypes retrieve. haplo either \"\" haplotypes integer single set haplotypes. Use value 1 female haplotypes value 2 male haplotypes diploids. chr vector chromosomes retrieve. NULL, chromosome retrieved. asRaw return raw (byte) format simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull SNP haplotypes — pullSnpHaplo","text":"Returns matrix SNP haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/pullSnpHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull SNP haplotypes — pullSnpHaplo","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$addSnpChip(5)  #Create population pop = newPop(founderPop, simParam=SP) pullSnpHaplo(pop, simParam=SP) #>      1_8 1_9 1_11 1_14 1_15 #> 1_1    1   0    1    1    0 #> 1_2    0   0    0    0    0 #> 2_1    0   1    1    0    0 #> 2_2    0   0    0    1    1 #> 3_1    0   0    1    0    1 #> 3_2    1   1    0    0    0 #> 4_1    1   0    0    1    1 #> 4_2    0   0    0    1    0 #> 5_1    0   0    1    1    1 #> 5_2    0   1    1    0    0 #> 6_1    1   0    0    0    1 #> 6_2    1   0    0    0    1 #> 7_1    1   1    1    0    0 #> 7_2    1   0    0    1    1 #> 8_1    1   1    0    0    1 #> 8_2    0   0    0    0    0 #> 9_1    1   0    0    0    0 #> 9_2    1   0    1    1    1 #> 10_1   1   0    0    0    1 #> 10_2   0   0    0    1    1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/quickHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick founder haplotype simulation — quickHaplo","title":"Quick founder haplotype simulation — quickHaplo","text":"Rapidly simulates founder haplotypes randomly sampling 0s 1s. equivalent loci allele frequency 0.5 linkage equilibrium.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/quickHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick founder haplotype simulation — quickHaplo","text":"","code":"quickHaplo(nInd, nChr, segSites, genLen = 1, ploidy = 2L, inbred = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/quickHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick founder haplotype simulation — quickHaplo","text":"nInd number individuals simulate nChr number chromosomes simulate segSites number segregating sites per chromosome genLen genetic length chromosomes ploidy ploidy level organism inbred founder individuals inbred","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/quickHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick founder haplotype simulation — quickHaplo","text":"object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/quickHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick founder haplotype simulation — quickHaplo","text":"","code":"# Creates a populations of 10 outbred individuals # Their genome consists of 1 chromosome and 100 segregating sites founderPop = quickHaplo(nInd=10,nChr=1,segSites=100)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross.html","id":null,"dir":"Reference","previous_headings":"","what":"Make random crosses — randCross","title":"Make random crosses — randCross","text":"wrapper makeCross randomly selects parental combinations possible combinantions.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make random crosses — randCross","text":"","code":"randCross(   pop,   nCrosses,   nProgeny = 1,   balance = TRUE,   parents = NULL,   ignoreSexes = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make random crosses — randCross","text":"pop object Pop-class nCrosses total number crosses make nProgeny number progeny per cross balance using sexes, option balance number progeny per parent parents optional vector indices allowable parents ignoreSexes sexes ignored simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make random crosses — randCross","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make random crosses — randCross","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Make 10 crosses pop2 = randCross(pop, 10, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross2.html","id":null,"dir":"Reference","previous_headings":"","what":"Make random crosses — randCross2","title":"Make random crosses — randCross2","text":"wrapper makeCross2 randomly selects parental combinations possible combinantions two populations.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make random crosses — randCross2","text":"","code":"randCross2(   females,   males,   nCrosses,   nProgeny = 1,   balance = TRUE,   femaleParents = NULL,   maleParents = NULL,   ignoreSexes = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make random crosses — randCross2","text":"females object Pop-class female parents. males object Pop-class male parents. nCrosses total number crosses make nProgeny number progeny per cross balance option balance number progeny per parent femaleParents optional vector indices allowable female parents maleParents optional vector indices allowable male parents ignoreSexes sex ignored simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make random crosses — randCross2","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/randCross2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make random crosses — randCross2","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Make 10 crosses pop2 = randCross2(pop, pop, 10, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/reduceGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Create individuals with reduced ploidy — reduceGenome","title":"Create individuals with reduced ploidy — reduceGenome","text":"Creates new individuals gametes. function created model creation diploid potatoes tetraploid potatoes. can used population even ploidy level. newly created individuals half ploidy level originals. reduction can occur without genetic recombination.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/reduceGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create individuals with reduced ploidy — reduceGenome","text":"","code":"reduceGenome(   pop,   nProgeny = 1,   useFemale = TRUE,   keepParents = TRUE,   simRecomb = TRUE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/reduceGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create individuals with reduced ploidy — reduceGenome","text":"pop object 'Pop' superclass nProgeny total number progeny per individual useFemale female recombination rates used. keepParents previous parents used mother father. simRecomb genetic recombination modeled. simParam object 'SimParam' class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/reduceGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create individuals with reduced ploidy — reduceGenome","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/reduceGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create individuals with reduced ploidy — reduceGenome","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Create individuals with reduced ploidy pop2 = reduceGenome(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/resetPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset population — resetPop","title":"Reset population — resetPop","text":"Recalculates population's genetic values resets phenotypes EBVs.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/resetPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset population — resetPop","text":"","code":"resetPop(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/resetPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset population — resetPop","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/resetPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset population — resetPop","text":"object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/resetPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset population — resetPop","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Rescale to set mean to 1 SP$rescaleTraits(mean=1) pop = resetPop(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create founder haplotypes using MaCS — runMacs","title":"Create founder haplotypes using MaCS — runMacs","text":"Uses MaCS software produce founder haplotypes MaCSAlphaSimR.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create founder haplotypes using MaCS — runMacs","text":"","code":"runMacs(   nInd,   nChr = 1,   segSites = NULL,   inbred = FALSE,   species = \"GENERIC\",   split = NULL,   ploidy = 2L,   manualCommand = NULL,   manualGenLen = NULL,   nThreads = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create founder haplotypes using MaCS — runMacs","text":"nInd number individuals simulate nChr number chromosomes simulate segSites number segregating sites keep per chromosome. value NULL results sites retained. inbred founder individuals inbred species species history simulate. See details. split optional historic population split terms generations ago. ploidy ploidy level organism manualCommand user provided MaCS options. advanced users . manualGenLen user provided genetic length. must supplied using manualCommand. using manualCommand, value replace predefined genetic length species. However, genetic length used AlphaSimR passed MaCS, MaCS still uses predefined genetic length. advanced users . nThreads OpenMP available, allow simulating chromosomes parallel. value NULL, number threads automatically detected.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create founder haplotypes using MaCS — runMacs","text":"object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create founder haplotypes using MaCS — runMacs","text":"currently three species histories available: GENERIC, CATTLE, WHEAT, MAIZE. GENERIC history meant reasonable -purpose choice. runs quickly models population effective populations size gone several historic bottlenecks. species history used default arguments runMacs2 function, user examine function details species modeled. CATTLE history based real genome sequence data cattleAlphaSimR. WHEAT gaynor_2017AlphaSimR MAIZE hickey_2014AlphaSimR histories included due use previous simulations. However, noted neither faithfully simulates respective species. apparent low number segregating sites simulated history relative real-world analogs. Adjusting histories better represent real-world analogs result drastic increase runtime.","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create founder haplotypes using MaCS — runMacs","text":"","code":"# Creates a populations of 10 outbred individuals # Their genome consists of 1 chromosome and 100 segregating sites if (FALSE) { # \\dontrun{ founderPop = runMacs(nInd=10,nChr=1,segSites=100) } # }"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs2.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative wrapper for MaCS — runMacs2","title":"Alternative wrapper for MaCS — runMacs2","text":"wrapper function runMacs. wrapper designed provide intuitive interface writing custom commands MaCS MaCSAlphaSimR. effectively automates creation appropriate line manualCommand argument runMacs using user supplied variables, allows subset functionality offered argument. default arguments function chosen match species=\"GENERIC\" runMacs.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative wrapper for MaCS — runMacs2","text":"","code":"runMacs2(   nInd,   nChr = 1,   segSites = NULL,   Ne = 100,   bp = 1e+08,   genLen = 1,   mutRate = 2.5e-08,   histNe = c(500, 1500, 6000, 12000, 1e+05),   histGen = c(100, 1000, 10000, 1e+05, 1e+06),   inbred = FALSE,   split = NULL,   ploidy = 2L,   returnCommand = FALSE,   nThreads = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative wrapper for MaCS — runMacs2","text":"nInd number individuals simulate nChr number chromosomes simulate segSites number segregating sites keep per chromosome Ne effective population size bp base pair length chromosome genLen genetic length chromosome Morgans mutRate per base pair mutation rate histNe effective population size previous generations histGen number generations ago effective population sizes given histNe inbred founder individuals inbred split optional historic population split terms generations ago ploidy ploidy level organism returnCommand command passed manualCommand runMacs returned. TRUE, MaCS called command returned instead. nThreads OpenMP available, allow simulating chromosomes parallel. value NULL, number threads automatically detected.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternative wrapper for MaCS — runMacs2","text":"object MapPop-class returnCommand true string giving MaCS command passed manualCommand argument runMacs.","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/runMacs2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternative wrapper for MaCS — runMacs2","text":"","code":"# Creates a populations of 10 outbred individuals # Their genome consists of 1 chromosome and 100 segregating sites # The command is equivalent to using species=\"GENERIC\" in runMacs if (FALSE) { # \\dontrun{ founderPop = runMacs2(nInd=10,nChr=1,segSites=100)  # runMacs() Implementation of the cattle demography following #  Macleod et al. (2013) https://doi.org/10.1093/molbev/mst125 cattleChrSum = 2.8e9 # https://www.ncbi.nlm.nih.gov/datasets/genome/GCF_002263795.3/ (cattleChrBp = cattleChrSum / 30) recRate = 9.26e-09 (cattleGenLen = recRate * cattleChrBp) mutRate = 1.20e-08 runMacs2(nInd = 10, nChr = 1, Ne = 90, bp = cattleChrBp,          genLen = cattleGenLen, mutRate = 1.20e-08,          histNe  = c(120, 250, 350, 1000, 1500, 2000, 2500, 3500, 7000, 10000, 17000, 62000),          histGen = c(  3,   6,  12,   18,   24,  154,  454,  654, 1754,  2354,  3354, 33154),          returnCommand = TRUE) } # }"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/sampleHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample haplotypes from a MapPop — sampleHaplo","title":"Sample haplotypes from a MapPop — sampleHaplo","text":"Creates new MapPop-class existing MapPop-class randomly sampling haplotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/sampleHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample haplotypes from a MapPop — sampleHaplo","text":"","code":"sampleHaplo(mapPop, nInd, inbred = FALSE, ploidy = NULL, replace = TRUE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/sampleHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample haplotypes from a MapPop — sampleHaplo","text":"mapPop MapPop-class used sample haplotypes nInd number individuals create inbred new individuals fully inbred ploidy new ploidy level organism. NULL, ploidy level mapPop used. replace haplotypes sampled replacement","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/sampleHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample haplotypes from a MapPop — sampleHaplo","text":"object MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/sampleHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample haplotypes from a MapPop — sampleHaplo","text":"","code":"founderPop = quickHaplo(nInd=2,nChr=1,segSites=11,inbred=TRUE) founderPop = sampleHaplo(mapPop=founderPop,nInd=20)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection index — selIndex","title":"Selection index — selIndex","text":"Calculates values selection index given trait values weights. function intended used combination selection functions working populations selectInd.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection index — selIndex","text":"","code":"selIndex(Y, b, scale = FALSE)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection index — selIndex","text":"Y matrix trait values b vector weights scale Y scaled centered","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selection index — selIndex","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) #Model two genetically correlated traits G = 1.5*diag(2)-0.5 #Genetic correlation matrix SP$addTraitA(10, mean=c(0,0), var=c(1,1), corA=G) SP$setVarE(h2=c(0.5,0.5))  #Create population pop = newPop(founderPop, simParam=SP)  #Calculate Smith-Hazel weights econWt = c(1, 1) b = smithHazel(econWt, varG(pop), varP(pop))  #Selection 2 best individuals using Smith-Hazel index #selIndex is used as a trait pop2 = selectInd(pop, nInd=2, trait=selIndex,                  simParam=SP, b=b)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selInt.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection intensity — selInt","title":"Selection intensity — selInt","text":"Calculates standardized selection intensity","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selInt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection intensity — selInt","text":"","code":"selInt(p)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selInt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection intensity — selInt","text":"p proportion individuals selected","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selInt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selection intensity — selInt","text":"","code":"selInt(0.1) #> [1] 1.754983"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectCross.html","id":null,"dir":"Reference","previous_headings":"","what":"Select and randomly cross — selectCross","title":"Select and randomly cross — selectCross","text":"wrapper combines functionalities randCross selectInd. purpose wrapper combine selection crossing one function call minimized amount intermediate populations created. reduces RAM usage simplifies code writing. Note wrapper provide full functionality either function.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select and randomly cross — selectCross","text":"","code":"selectCross(   pop,   nInd = NULL,   nFemale = NULL,   nMale = NULL,   nCrosses,   nProgeny = 1,   trait = 1,   use = \"pheno\",   selectTop = TRUE,   simParam = NULL,   ...,   balance = TRUE )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select and randomly cross — selectCross","text":"pop object Pop-class nInd number individuals select. individuals selected without regards sex supercedes values nFemale nMale. Thus simulation uses sexes, likely better leave value NULL use nFemale nMale instead. nFemale number females select. value ignored nInd set. nMale number males select. value ignored nInd set. nCrosses total number crosses make nProgeny number progeny per cross trait trait selection. Either number indicating single trait function returning vector length nInd. use select genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", phenotypes \"pheno\", randomly \"rand\" selectTop selects highest values true. Selects lowest values false. simParam object SimParam ... additional arguments using function trait balance using sexes, option balance number progeny per parent. argument occurs ..., argument name must matched exactly.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectCross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select and randomly cross — selectCross","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select and randomly cross — selectCross","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP)  #Select 4 individuals and make 8 crosses pop2 = selectCross(pop, nInd=4, nCrosses=8, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectFam.html","id":null,"dir":"Reference","previous_headings":"","what":"Select families — selectFam","title":"Select families — selectFam","text":"Selects subset full-sib families population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectFam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select families — selectFam","text":"","code":"selectFam(   pop,   nFam,   trait = 1,   use = \"pheno\",   sex = \"B\",   famType = \"B\",   selectTop = TRUE,   returnPop = TRUE,   candidates = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectFam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select families — selectFam","text":"pop object Pop-class, HybridPop-class MultiPop-class nFam number families select trait trait selection. Either number indicating single trait function returning vector length nInd. function must work vector matrix use values trait(pop@use, ...) - depending use . See examples selIndex. use selection criterion. Either character (genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", phenotypes \"pheno\", randomly \"rand\") function returning vector length nInd. function must work pop use(pop, trait, ...) trait(pop@use, ...) depending trait . See examples. sex sex select. Use \"B\" , \"F\" females \"M\" males. simulation using sexes, argument ignored. famType type family select. Use \"B\" full-sib families, \"F\" half-sib families female side \"M\" half-sib families male side. selectTop selects highest values true. Selects lowest values false. returnPop results returned Pop-class. FALSE, index selected individuals returned. candidates optional vector eligible selection candidates. simParam object SimParam ... additional arguments using function trait use","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectFam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select families — selectFam","text":"Returns object Pop-class, HybridPop-class MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectFam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select families — selectFam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP)  #Create 3 biparental families with 10 progeny pop2 = randCross(pop, nCrosses=3, nProgeny=10, simParam=SP)  #Select best 2 families pop3 = selectFam(pop2, 2, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectInd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select individuals — selectInd","title":"Select individuals — selectInd","text":"Selects subset nInd individuals population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectInd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select individuals — selectInd","text":"","code":"selectInd(   pop,   nInd,   trait = 1,   use = \"pheno\",   sex = \"B\",   selectTop = TRUE,   returnPop = TRUE,   candidates = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectInd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select individuals — selectInd","text":"pop object Pop-class, HybridPop-class MultiPop-class nInd number individuals select trait trait selection. Either number indicating single trait function returning vector length nInd. function must work vector matrix use values trait(pop@use, ...) - depending use . See examples selIndex. use selection criterion. Either character (genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", phenotypes \"pheno\", randomly \"rand\") function returning vector length nInd. function must work pop use(pop, trait, ...) trait(pop@use, ...) depending trait . See examples. sex sex select. Use \"B\" , \"F\" females \"M\" males. simulation using sexes, argument ignored. selectTop selects highest values true. Selects lowest values false. returnPop results returned Pop-class. FALSE, index selected individuals returned. candidates optional vector eligible selection candidates. simParam object SimParam ... additional arguments using function trait use","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectInd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select individuals — selectInd","text":"Returns object Pop-class, HybridPop-class MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectInd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select individuals — selectInd","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP)  #Select top 5 (directional selection) pop2 = selectInd(pop, 5, simParam=SP) hist(pop@pheno); abline(v=pop@pheno, lwd=2) abline(v=pop2@pheno, col=\"red\", lwd=2)   #Select 5 most deviating from an optima (disruptive selection) squaredDeviation = function(x, optima=0) (x - optima)^2 pop3 = selectInd(pop, 5, trait=squaredDeviation, selectTop=TRUE, simParam=SP) hist(pop@pheno); abline(v=pop@pheno, lwd=2) abline(v=pop3@pheno, col=\"red\", lwd=2)   #Select 5 least deviating from an optima (stabilising selection) pop4 = selectInd(pop, 5, trait=squaredDeviation, selectTop=FALSE, simParam=SP) hist(pop@pheno); abline(v=pop@pheno, lwd=2) abline(v=pop4@pheno, col=\"red\", lwd=2)   #Select 5 individuals based on miscelaneous information with use function pop@misc = list(smth=rnorm(10), smth2=rnorm(10)) useFunc = function(pop, trait=NULL) pop@misc$smth + pop@misc$smth2 pop5 = selectInd(pop, 5, use=useFunc, simParam=SP) pop5@id #> [1] \"1\" \"6\" \"3\" \"8\" \"2\"  #... equivalent result with the use & trait function useFunc2 = function(pop, trait=NULL) cbind(pop@misc$smth, pop@misc$smth2) trtFunc = function(x) rowSums(x) pop6 = selectInd(pop, 5, trait=trtFunc, use=useFunc2, simParam=SP) pop6@id #> [1] \"1\" \"6\" \"3\" \"8\" \"2\""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectOP.html","id":null,"dir":"Reference","previous_headings":"","what":"Select open pollinating plants — selectOP","title":"Select open pollinating plants — selectOP","text":"function models selection open pollinating plant population. allows varying percentage selfing. function also provides option modeling selection occuring pollination.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectOP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select open pollinating plants — selectOP","text":"","code":"selectOP(   pop,   nInd,   nSeeds,   probSelf = 0,   pollenControl = FALSE,   trait = 1,   use = \"pheno\",   selectTop = TRUE,   candidates = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectOP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select open pollinating plants — selectOP","text":"pop object Pop-class MultiPop-class nInd number plants select nSeeds number seeds per plant probSelf percentage seeds expected selfing. Value ranges 0 1. pollenControl plants selected pollination trait trait selection. Either number indicating single trait function returning vector length nInd. function must work vector matrix use values trait(pop@use, ...) - depending use . See examples selIndex. use selection criterion. Either character (genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", phenotypes \"pheno\", randomly \"rand\") function returning vector length nInd. function must work pop use(pop, trait, ...) trait(pop@use, ...) depending trait . See examples. selectTop selects highest values true. Selects lowest values false. candidates optional vector eligible selection candidates. simParam object SimParam ... additional arguments using function trait use","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectOP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select open pollinating plants — selectOP","text":"Returns object Pop-class MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectOP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select open pollinating plants — selectOP","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP)  #Create new population by selecting the best 3 plant #Assuming 50% selfing in plants and 10 seeds per plant pop2 = selectOP(pop, nInd=3, nSeeds=10, probSelf=0.5, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectWithinFam.html","id":null,"dir":"Reference","previous_headings":"","what":"Select individuals within families — selectWithinFam","title":"Select individuals within families — selectWithinFam","text":"Selects subset nInd individuals full-sib family within population. return individuals full-sib family less equal nInd individuals.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectWithinFam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select individuals within families — selectWithinFam","text":"","code":"selectWithinFam(   pop,   nInd,   trait = 1,   use = \"pheno\",   sex = \"B\",   famType = \"B\",   selectTop = TRUE,   returnPop = TRUE,   candidates = NULL,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectWithinFam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select individuals within families — selectWithinFam","text":"pop object Pop-class, HybridPop-class MultiPop-class nInd number individuals select within family trait trait selection. Either number indicating single trait function returning vector length nInd. function must work vector matrix use values trait(pop@use, ...) - depending use . See examples selIndex. use selection criterion. Either character (genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", phenotypes \"pheno\", randomly \"rand\") function returning vector length nInd. function must work pop use(pop, trait, ...) trait(pop@use, ...) depending trait . See examples. sex sex select. Use \"B\" , \"F\" females \"M\" males. simulation using sexes, argument ignored. famType type family select. Use \"B\" full-sib families, \"F\" half-sib families female side \"M\" half-sib families male side. selectTop selects highest values true. Selects lowest values false. returnPop results returned Pop-class. FALSE, index selected individuals returned. candidates optional vector eligible selection candidates. simParam object SimParam ... additional arguments using function trait use","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectWithinFam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select individuals within families — selectWithinFam","text":"Returns object Pop-class, HybridPop-class MultiPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/selectWithinFam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select individuals within families — selectWithinFam","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP)  #Create 3 biparental families with 10 progeny pop2 = randCross(pop, nCrosses=3, nProgeny=10, simParam=SP)  #Select best individual per family pop3 = selectWithinFam(pop2, 1, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/self.html","id":null,"dir":"Reference","previous_headings":"","what":"Self individuals — self","title":"Self individuals — self","text":"Creates selfed progeny individual population. works sexes \"\".","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/self.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Self individuals — self","text":"","code":"self(pop, nProgeny = 1, parents = NULL, keepParents = TRUE, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/self.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Self individuals — self","text":"pop object Pop-class nProgeny total number selfed progeny per individual parents optional vector indices allowable parents keepParents previous parents used mother father. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/self.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Self individuals — self","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/self.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Self individuals — self","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop)  #Create population pop = newPop(founderPop, simParam=SP)  #Self pollinate each individual pop2 = self(pop, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setEBV.html","id":null,"dir":"Reference","previous_headings":"","what":"Set estimated breeding values (EBV) — setEBV","title":"Set estimated breeding values (EBV) — setEBV","text":"Adds genomic estimated values populations's EBV slot using output genomic selection functions. genomic estimated values can either estimated breeding values, estimated genetic values, estimated general combining values.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setEBV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set estimated breeding values (EBV) — setEBV","text":"","code":"setEBV(   pop,   solution,   value = \"gv\",   targetPop = NULL,   append = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setEBV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set estimated breeding values (EBV) — setEBV","text":"pop object Pop-class solution object RRsol-class value genomic value estimated. Can either \"gv\", \"bv\", \"female\", \"male\". targetPop optional target population can used value \"bv\", \"female\", \"male\". supplied, allele frequency targetPop used set values. append estimated values appended existing data EBV slot. TRUE, new column added. FALSE, existing data replaced new estimates. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setEBV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set estimated breeding values (EBV) — setEBV","text":"Returns object Pop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setEBV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set estimated breeding values (EBV) — setEBV","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=20)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5) SP$addSnpChip(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Run GS model and set EBV ans = RRBLUP(pop, simParam=SP) pop = setEBV(pop, ans, simParam=SP)  #Evaluate accuracy cor(gv(pop), ebv(pop)) #>        est_GV_Trait1 #> Trait1     0.3798069"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Set marker haplotypes — setMarkerHaplo","title":"Set marker haplotypes — setMarkerHaplo","text":"Manually sets haplotypes population individuals one loci.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set marker haplotypes — setMarkerHaplo","text":"","code":"setMarkerHaplo(pop, haplo, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set marker haplotypes — setMarkerHaplo","text":"pop object RawPop-class MapPop-class haplo matrix haplotypes, see details simParam object SimParam, used pop MapPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set marker haplotypes — setMarkerHaplo","text":"object class \"pop\" input","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set marker haplotypes — setMarkerHaplo","text":"format haplotype matrix match format output pullMarkerHaplo option haplo=\"\". Thus, recommended function first used extract haplotypes desired changes made output pullMarkerHaplo passing matrix setMarkerHaplo. changes made QTL may potentially result changes individuals genetic value. changes reflected gv /gxe slot. slots remain unchanged, ebv pheno slots reflect new genotypes.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setMarkerHaplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set marker haplotypes — setMarkerHaplo","text":"","code":"# Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=15)  # Extract haplotypes for marker \"1_1\" H = pullMarkerHaplo(founderPop, markers=\"1_1\")  # Set the first haplotype to 1 H[1,1] = 1L  # Set marker haplotypes founderPop = setMarkerHaplo(founderPop, haplo=H)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Set phenotypes — setPheno","title":"Set phenotypes — setPheno","text":"Sets phenotypes traits adding random error multivariate normal distribution.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set phenotypes — setPheno","text":"","code":"setPheno(   pop,   h2 = NULL,   H2 = NULL,   varE = NULL,   corE = NULL,   reps = 1,   fixEff = 1L,   p = NULL,   onlyPheno = FALSE,   traits = NULL,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set phenotypes — setPheno","text":"pop object Pop-class HybridPop-class h2 vector desired narrow-sense heritabilities trait. See details. H2 vector desired broad-sense heritabilities trait. See details. varE error (co)variances traits. See details. corE optional matrix correlations errors. See details. reps number replications phenotype. See details. fixEff fixed effect assign population. Used genomic selection models . p p-value environmental covariate used GxE traits. NULL, value sampled random. onlyPheno phenotype returned, see return traits integer vector indicate traits set. NULL, traits set. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set phenotypes — setPheno","text":"Returns object Pop-class HybridPop-class onlyPheno=FALSE, onlyPheno=TRUE matrix returned","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set phenotypes — setPheno","text":"three arguments setting error variance phenotype: h2, H2, varE. user use one arguments. user supplies values one, one used according order listed . h2 argument allows user specify error variance according narrow-sense heritability. calculation uses additive genetic variance total genetic variance founder population. Thus, heritability relates founder population current population. H2 argument allows user specify error variance according broad-sense heritability. calculation uses total genetic variance founder population. Thus, heritability relates founder population current population. varE argument allows user specify error variance directly. user may supply vector describing error variance trait supply matrix specify covariance errors. corE argument allows user specify correlations error covariance matrix. correlations supplied addition h2, H2, varE arguments. correlations used construct covariance matrix vector variances. user supplied covariance matrix varE, correlations supercede values provided matrix. reps parameter convenient representation replicated data. intended represent replicated yield trials plant breeding programs. case, varE set plot error reps set number plots per entry. resulting phenotype represents entry-means.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPheno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set phenotypes — setPheno","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Add phenotype with error variance of 1 pop = setPheno(pop, varE=1) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoGCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GCA as phenotype — setPhenoGCA","title":"Set GCA as phenotype — setPhenoGCA","text":"Calculates general combining ability set testers returns values phenotypes population.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoGCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GCA as phenotype — setPhenoGCA","text":"","code":"setPhenoGCA(   pop,   testers,   use = \"pheno\",   h2 = NULL,   H2 = NULL,   varE = NULL,   corE = NULL,   reps = 1,   fixEff = 1L,   p = NULL,   inbred = FALSE,   onlyPheno = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoGCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GCA as phenotype — setPhenoGCA","text":"pop object Pop-class testers object Pop-class use true genetic value (gv) phenotypes (pheno, default) h2 vector desired narrow-sense heritabilities trait. See details setPheno. H2 vector desired broad-sense heritabilities trait. See details setPheno. varE error (co)variances traits. See details setPheno. corE optional matrix correlations errors. See details setPheno. reps number replications phenotype. See details setPheno. fixEff fixed effect assign population. Used genomic selection models . p p-value environmental covariate used GxE traits. NULL, value sampled random. inbred pop testers fully inbred. fully inbred created newPop using inbred founders makeDH function onlyPheno phenotype returned, see return simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoGCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GCA as phenotype — setPhenoGCA","text":"Returns object Pop-class matrix onlyPheno=TRUE","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoGCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GCA as phenotype — setPhenoGCA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10, inbred=TRUE)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Set phenotype to average per pop2 = setPhenoGCA(pop, pop, use=\"gv\", inbred=TRUE, simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Set progeny test as phenotype — setPhenoProgTest","title":"Set progeny test as phenotype — setPhenoProgTest","text":"Models progeny test individuals 'pop'. Returns 'pop' phenotype representing average performance progeny. phenotype generated mating individuals 'pop' randomly chosen individuals testPop number times equal 'nMatePerInd'.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set progeny test as phenotype — setPhenoProgTest","text":"","code":"setPhenoProgTest(   pop,   testPop,   nMatePerInd = 1L,   use = \"pheno\",   h2 = NULL,   H2 = NULL,   varE = NULL,   corE = NULL,   reps = 1,   fixEff = 1L,   p = NULL,   onlyPheno = FALSE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set progeny test as phenotype — setPhenoProgTest","text":"pop object Pop-class testPop object Pop-class nMatePerInd number times individual 'pop' mated individual testPop use true genetic value (gv) phenotypes (pheno, default) h2 vector desired narrow-sense heritabilities trait. See details setPheno. H2 vector desired broad-sense heritabilities trait. See details setPheno. varE error (co)variances traits. See details setPheno. corE optional matrix correlations errors. See details setPheno. reps number replications phenotype. See details setPheno. fixEff fixed effect assign population. Used genomic selection models . p p-value environmental covariate used GxE traits. NULL, value sampled random. onlyPheno phenotype returned, see return simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set progeny test as phenotype — setPhenoProgTest","text":"Returns object Pop-class matrix onlyPheno=TRUE","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set progeny test as phenotype — setPhenoProgTest","text":"reps parameter convenient representation replicated data. intended representation replicated yield trials plant breeding programs. case, varE set plot error reps set number plots per entry. resulting phenotype reflect mean replications.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/setPhenoProgTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set progeny test as phenotype — setPhenoProgTest","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10, inbred=TRUE)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create two populations of 5 individuals pop1 = newPop(founderPop[1:5], simParam=SP) pop2 = newPop(founderPop[6:10], simParam=SP)  #Set phenotype according to a progeny test pop3 = setPhenoProgTest(pop1, pop2, use=\"gv\", simParam=SP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/smithHazel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Smith-Hazel weights — smithHazel","title":"Calculate Smith-Hazel weights — smithHazel","text":"Calculates weights Smith-Hazel index given economice weights phenotypic genotypic variance-covariance matrices.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/smithHazel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Smith-Hazel weights — smithHazel","text":"","code":"smithHazel(econWt, varG, varP)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/smithHazel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Smith-Hazel weights — smithHazel","text":"econWt vector economic weights varG genetic variance-covariance matrix varP phenotypic variance-covariance matrix","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/smithHazel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Smith-Hazel weights — smithHazel","text":"vector weight calculating index values","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/smithHazel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Smith-Hazel weights — smithHazel","text":"","code":"G = 1.5*diag(2)-0.5 E = diag(2) P = G+E wt = c(1,1) smithHazel(wt, G, P) #>           [,1] #> [1,] 0.3333333 #> [2,] 0.3333333"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMKM.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Multikernel Model — solveMKM","title":"Solve Multikernel Model — solveMKM","text":"Solves univariate mixed model multiple random effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMKM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Multikernel Model — solveMKM","text":"","code":"solveMKM(y, X, Zlist, Klist, maxIter = 40L, tol = 1e-04)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMKM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Multikernel Model — solveMKM","text":"y matrix n rows 1 column X matrix n rows x columns Zlist list Z matrices Klist list K matrices maxIter maximum number iteration tol tolerance convergence","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Multivariate Model — solveMVM","title":"Solve Multivariate Model — solveMVM","text":"Solves multivariate mixed model form \\(Y=X\\beta+Zu+e\\)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Multivariate Model — solveMVM","text":"","code":"solveMVM(Y, X, Z, K, tol = 1e-06, maxIter = 1000L)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveMVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Multivariate Model — solveMVM","text":"Y matrix n rows q columns X matrix n rows x columns Z matrix n rows m columns K matrix m rows m columns tol tolerance convergence maxIter maximum number iteration","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve RR-BLUP — solveRRBLUP","title":"Solve RR-BLUP — solveRRBLUP","text":"Solves univariate mixed model form \\(y=X\\beta+Mu+e\\)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve RR-BLUP — solveRRBLUP","text":"","code":"solveRRBLUP(y, X, M)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve RR-BLUP — solveRRBLUP","text":"y matrix n rows 1 column X matrix n rows x columns M matrix n rows m columns","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMK.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Multikernel RR-BLUP — solveRRBLUPMK","title":"Solve Multikernel RR-BLUP — solveRRBLUPMK","text":"Solves univariate mixed model multiple random effects.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Multikernel RR-BLUP — solveRRBLUPMK","text":"","code":"solveRRBLUPMK(y, X, Mlist, maxIter = 40L)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Multikernel RR-BLUP — solveRRBLUPMK","text":"y matrix n rows 1 column X matrix n rows x columns Mlist list M matrices maxIter maximum number iteration","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMV.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Multivariate RR-BLUP — solveRRBLUPMV","title":"Solve Multivariate RR-BLUP — solveRRBLUPMV","text":"Solves multivariate mixed model form \\(Y=X\\beta+Mu+e\\)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Multivariate RR-BLUP — solveRRBLUPMV","text":"","code":"solveRRBLUPMV(Y, X, M, maxIter = 1000L, tol = 1e-06)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUPMV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Multivariate RR-BLUP — solveRRBLUPMV","text":"Y matrix n rows q columns X matrix n rows x columns M matrix n rows m columns maxIter maximum number iteration tol tolerance convergence","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve RR-BLUP with EM — solveRRBLUP_EM","title":"Solve RR-BLUP with EM — solveRRBLUP_EM","text":"Solves univariate mixed model form \\(y=X\\beta+Mu+e\\) using Expectation-Maximization algorithm.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve RR-BLUP with EM — solveRRBLUP_EM","text":"","code":"solveRRBLUP_EM(Y, X, M, Vu, Ve, tol, maxIter, useEM)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve RR-BLUP with EM — solveRRBLUP_EM","text":"Y matrix n rows 1 column X matrix n rows x columns M matrix n rows m columns Vu initial guess variance marker effects Ve initial guess error variance tol tolerance declaring convergence maxIter maximum iteration attempting convergence useEM EM algorithm used. false, estimation variance components performed. initial values treated true.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM2.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve RR-BLUP with EM and 2 random effects — solveRRBLUP_EM2","title":"Solve RR-BLUP with EM and 2 random effects — solveRRBLUP_EM2","text":"Solves univariate mixed model form \\(y=X\\beta+M_1u_1+M_2u_2+e\\) using Expectation-Maximization algorithm.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve RR-BLUP with EM and 2 random effects — solveRRBLUP_EM2","text":"","code":"solveRRBLUP_EM2(Y, X, M1, M2, Vu1, Vu2, Ve, tol, maxIter, useEM)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve RR-BLUP with EM and 2 random effects — solveRRBLUP_EM2","text":"Y matrix n rows 1 column X matrix n rows x columns M1 matrix n rows m1 columns M2 matrix n rows m2 columns Vu1 initial guess variance first marker effects Vu2 initial guess variance second marker effects Ve initial guess error variance tol tolerance declaring convergence maxIter maximum iteration attempting convergence useEM EM algorithm used. false, estimation variance components performed. initial values treated true.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM3.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve RR-BLUP with EM and 3 random effects — solveRRBLUP_EM3","title":"Solve RR-BLUP with EM and 3 random effects — solveRRBLUP_EM3","text":"Solves univariate mixed model form \\(y=X\\beta+M_1u_1+M_2u_2+M_3u_3+e\\) using Expectation-Maximization algorithm.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve RR-BLUP with EM and 3 random effects — solveRRBLUP_EM3","text":"","code":"solveRRBLUP_EM3(Y, X, M1, M2, M3, Vu1, Vu2, Vu3, Ve, tol, maxIter, useEM)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveRRBLUP_EM3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve RR-BLUP with EM and 3 random effects — solveRRBLUP_EM3","text":"Y matrix n rows 1 column X matrix n rows x columns M1 matrix n rows m1 columns M2 matrix n rows m2 columns M3 matrix n rows m3 columns Vu1 initial guess variance first marker effects Vu2 initial guess variance second marker effects Vu3 initial guess variance second marker effects Ve initial guess error variance tol tolerance declaring convergence maxIter maximum iteration attempting convergence useEM EM algorithm used. false, estimation variance components performed. initial values treated true.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveUVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Univariate Model — solveUVM","title":"Solve Univariate Model — solveUVM","text":"Solves univariate mixed model form \\(y=X\\beta+Zu+e\\)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveUVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Univariate Model — solveUVM","text":"","code":"solveUVM(y, X, Z, K)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/solveUVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Univariate Model — solveUVM","text":"y matrix n rows 1 column X matrix n rows x columns Z matrix n rows m columns K matrix m rows m columns","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/transMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear transformation matrix — transMat","title":"Linear transformation matrix — transMat","text":"Creates m m linear transformation matrix can applied n m uncorrelated deviates sampled standard normal distribution produce correlated deviates arbitrary correlation R. R positive semi-definite, function returns smoothing returns warning (see details).","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/transMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear transformation matrix — transMat","text":"","code":"transMat(R)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/transMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear transformation matrix — transMat","text":"R correlation matrix","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/transMat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear transformation matrix — transMat","text":"eigendecomposition applied correlation matrix used test positive semi-definite. matrix positive semi-definite, valid correlation matrix. case, smoothing applied matrix (described 'cor.smooth' 'psych' library) obtain valid correlation matrix. resulting deviates thus exactly match desired correlation, hopefully close input matrix far removed valid correlation matrix.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/transMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear transformation matrix — transMat","text":"","code":"# Create an 2x2 correlation matrix R = 0.5*diag(2) + 0.5  # Sample 1000 uncorrelated deviates from a # bivariate standard normal distribution X = matrix(rnorm(2*1000), ncol=2)  # Compute the transformation matrix T = transMat(R)  # Apply the transformation to the deviates Y = X%*%T  # Measure the sample correlation cor(Y) #>           [,1]      [,2] #> [1,] 1.0000000 0.4953788 #> [2,] 0.4953788 1.0000000"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/usefulness.html","id":null,"dir":"Reference","previous_headings":"","what":"Usefulness criterion — usefulness","title":"Usefulness criterion — usefulness","text":"Calculates usefulness criterion","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/usefulness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Usefulness criterion — usefulness","text":"","code":"usefulness(   pop,   trait = 1,   use = \"gv\",   p = 0.1,   selectTop = TRUE,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/usefulness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Usefulness criterion — usefulness","text":"pop object Pop-class HybridPop-class trait trait selection. Either number indicating single trait function returning vector length nInd. use select genetic values (gv, default), estimated breeding values (ebv), breeding values (bv), phenotypes (pheno) p proportion individuals selected selectTop selects highest values true. Selects lowest values false. simParam object SimParam ... additional arguments using function trait","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/usefulness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Usefulness criterion — usefulness","text":"Returns numeric value","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/usefulness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Usefulness criterion — usefulness","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=2, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10)  #Create population pop = newPop(founderPop, simParam=SP)  #Determine usefulness of population usefulness(pop, simParam=SP) #> [1] 1  #Should be equivalent to GV of best individual max(gv(pop)) #> [1] 1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varA.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive variance — varA","title":"Additive variance — varA","text":"Returns additive variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive variance — varA","text":"","code":"varA(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive variance — varA","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive variance — varA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) varA(pop, simParam=SP) #>        Trait1 #> Trait1      1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varAA.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive-by-additive epistatic variance — varAA","title":"Additive-by-additive epistatic variance — varAA","text":"Returns additive--additive epistatic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varAA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive-by-additive epistatic variance — varAA","text":"","code":"varAA(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varAA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive-by-additive epistatic variance — varAA","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varAA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive-by-additive epistatic variance — varAA","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) varAA(pop, simParam=SP) #>        Trait1 #> Trait1      0"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varD.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominance variance — varD","title":"Dominance variance — varD","text":"Returns dominance variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominance variance — varD","text":"","code":"varD(pop, simParam = NULL)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominance variance — varD","text":"pop object Pop-class simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominance variance — varD","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitAD(10, meanDD=0.5) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) varD(pop, simParam=SP) #>            Trait1 #> Trait1 0.07234995"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varEBV.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of estimated breeding values — varEBV","title":"Variance of estimated breeding values — varEBV","text":"Returns variance estimated breeding values traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varEBV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of estimated breeding values — varEBV","text":"","code":"varEBV(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varEBV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of estimated breeding values — varEBV","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varEBV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of estimated breeding values — varEBV","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) trtH2 = 0.5 SP$setVarE(h2=trtH2)  #Create population pop = newPop(founderPop, simParam=SP) pop@ebv = trtH2 * (pop@pheno - meanP(pop)) #ind performance based EBV varA(pop) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found varEBV(pop) #>           Trait1 #> Trait1 0.5877897"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varG.html","id":null,"dir":"Reference","previous_headings":"","what":"Total genetic variance — varG","title":"Total genetic variance — varG","text":"Returns total genetic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total genetic variance — varG","text":"","code":"varG(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total genetic variance — varG","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total genetic variance — varG","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) varG(pop) #>        Trait1 #> Trait1      1"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varP.html","id":null,"dir":"Reference","previous_headings":"","what":"Phenotypic variance — varP","title":"Phenotypic variance — varP","text":"Returns phenotypic variance traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phenotypic variance — varP","text":"","code":"varP(pop)"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phenotypic variance — varP","text":"pop object Pop-class HybridPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/varP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phenotypic variance — varP","text":"","code":"#Create founder haplotypes founderPop = quickHaplo(nInd=10, nChr=1, segSites=10)  #Set simulation parameters SP = SimParam$new(founderPop) SP$addTraitA(10) SP$setVarE(h2=0.5)  #Create population pop = newPop(founderPop, simParam=SP) varP(pop) #>          Trait1 #> Trait1 2.013928"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writePlink.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a Pop-class as PLINK files — writePlink","title":"Writes a Pop-class as PLINK files — writePlink","text":"Writes Pop-class PLINK PED MAP files. arguments function chosen consistency RRBLUP2. base pair coordinate locus position stored AlphaSimR actual base pair position. AlphaSimR track base pair positions, relative positions loci used simulation.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writePlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a Pop-class as PLINK files — writePlink","text":"","code":"writePlink(   pop,   baseName,   traits = 1,   use = \"pheno\",   snpChip = 1,   useQtl = FALSE,   simParam = NULL,   ... )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writePlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a Pop-class as PLINK files — writePlink","text":"pop object Pop-class baseName basename PED MAP files. traits integer indicating trait write, trait name, function traits returning single value. use use PLINK's phenotype field. Either phenotypes \"pheno\", genetic values \"gv\", estimated breeding values \"ebv\", breeding values \"bv\", random values \"rand\". snpChip integer indicating SNP chip genotype use useQtl QTL genotypes used instead SNP chip. TRUE, snpChip specifies trait's QTL use, thus QTL may match QTL underlying phenotype supplied traits. simParam object SimParam ... additional arguments using function traits","code":""},{"path":[]},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writeRecords.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data records — writeRecords","title":"Write data records — writeRecords","text":"Saves population's phenotypic marker data directory.","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writeRecords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data records — writeRecords","text":"","code":"writeRecords(   pop,   dir,   snpChip = 1,   useQtl = FALSE,   includeHaplo = FALSE,   append = TRUE,   simParam = NULL )"},{"path":"https://gaynorr.github.io/AlphaSimR/reference/writeRecords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data records — writeRecords","text":"pop object Pop-class dir path directory saving output snpChip SNP chip genotype save. useQtl=TRUE, value indicate trait's QTL genotype save. value 0 skip writing snpChip. useQtl QTL genotype written instead SNP chip genotypes. includeHaplo markers separated female male haplotypes. append true, new records added existing records. false, existing records deleted writing new records. Note delete files 'dir' directory. simParam object SimParam","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-161","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.6.1","title":"AlphaSimR 1.6.1","text":"CRAN release: 2024-11-01 *fixed bug mergePops [ (subset) methods - failing populations misc slot matrix - now check misc slot element matrix rbind mergePops subset rows [ (assuming first dimension represents individuals)","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-160","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.6.0","title":"AlphaSimR 1.6.0","text":"CRAN release: 2024-08-17 *exported meanEBV added varEBV complement meanP/varP meanG/varG *Changed parameters CATTLE demographic model exactly match Macleod et al. (2013) - specifically reducing mutation rate 2.5e-8 (human literature) 1.2e-8 (used Macleod et al., 2013) recombination rate 1e-8 (generic) 9.26e-9 (used Macleod et al., 2013). changes reduce number segregating sites ~240K per chromosome 100 samples run faster. *changed misc slot Pop class list organised ind x nodes list organised nodes x ind (simplified code increased speed) *removed setMisc getMisc new misc slot structure makes easy set get misc components base R code *added length method Pop class returns number individuals (like nInd) *added length method MultiPop class returns number populations *fixed bug quadrivalent pairing resulting distribution double reductions respecting centromere","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-153","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.5.3","title":"AlphaSimR 1.5.3","text":"CRAN release: 2023-12-01 *fixed bug SimParam$restrSegSites excluding sites end chromosome","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-152","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.5.2","title":"AlphaSimR 1.5.2","text":"CRAN release: 2023-11-01 *fix SimParam examples CRAN","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-151","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.5.1","title":"AlphaSimR 1.5.1","text":"*deleted bad example code setMisc *changed examples use single thread CRAN testing change shown documentation","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-150","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.5.0","title":"AlphaSimR 1.5.0","text":"*renamed MegaPop MultiPop *fixed bug writePlink correctly export map positions cM *fixed bug writeRecords due removed reps slot pops *added altAddTraitAD specifying traits dominance effects using dominance variance inbreeding depression *add miscPop slot class Pop","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-142","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.4.2","title":"AlphaSimR 1.4.2","text":"CRAN release: 2023-03-27 *updated MaCS citation https site","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-141","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.4.1","title":"AlphaSimR 1.4.1","text":"*Changed citation use bibentry instead citEntry","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-140","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.4.0","title":"AlphaSimR 1.4.0","text":"*fixed bug IBD tracking *add setFounderHap SimParam applying custom haplotypes founders *added addSnpChipByName SimParam defining SNP chips marker names","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-134","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.3.4","title":"AlphaSimR 1.3.4","text":"CRAN release: 2022-12-09 *changed C++ using sprintf use snprintf","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-133","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.3.3","title":"AlphaSimR 1.3.3","text":"*fixed bug calculation genic variance *fixed importHaplo passing ploidy newMapPop *fixed bug correlated error variances","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-132","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.3.2","title":"AlphaSimR 1.3.2","text":"CRAN release: 2022-11-02 *fixed column name bug multiple traits setEBV *fixed CTD caused runMacs many segSites requested *fixed missing names GV using resetPop *fixed bug importTrait *popVar now deals matrices 1 row","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-131","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.3.1","title":"AlphaSimR 1.3.1","text":"CRAN release: 2022-08-25 *updated link Gaynor, 2017","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-130","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.3.0","title":"AlphaSimR 1.3.0","text":"*added ability exclude loci name SimParam$restrSegSites *pullMarkerGeno pullMarkerHaplo now work MapPop class *added setMarkerHaplo manually change genotypes Pop MapPop *added addSegSite manually adding segregating sites MapPop class *simParam$setCorE deprecated favor corE argument simParam$setVarE *setPheno now takes corE argument *setPheno now allows user set phenotypes subset traits *add newEmptyPop create populations zero individuals *removed reps slot populations heterogeneous residual variance GS models *added h2, H2, corE setPhenoGCA setPhenoProgTest *“EUROPEAN” species history removed runMacs due lengthy runtime","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-122","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.2.2","title":"AlphaSimR 1.2.2","text":"*added getPed quick extract population’s pedigree *added getGenMap pull genetic map data.frame format","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-121","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.2.1","title":"AlphaSimR 1.2.1","text":"CRAN release: 2022-07-05 *fixed bugs relating importData functions *fixed writePlink errors longer requires equal length chromosomes","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-120","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.2.0","title":"AlphaSimR 1.2.0","text":"*added importGenMap format genetic maps AlphaSimR *added importInbredGeno importHaplo make easier create simulation external data *added importSnpChip, importTrait SimParam make easier manually define traits *added pullMarkerGeno pullMarkerHaplo make easier extract genotypes haplotypes specific loci without defining trait SNP chip *reduceGenome, mergeGenome doubleGenome really now work pedigree recombination tracking","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-112","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.1.2","title":"AlphaSimR 1.1.2","text":"CRAN release: 2022-02-17 *added missing #ifdef _OPENMP OCS.cpp","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-111","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.1.1","title":"AlphaSimR 1.1.1","text":"*removed use PI variable C++ code due compiler specific","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-110","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.1.0","title":"AlphaSimR 1.1.0","text":"*added snpChip argument pullIbdHaplo backwards compatibility *exposed internal mixed model solvers *selection functions now return warning enough individuals *fixed error pullIbdHaplo chr isn’t NULL *fixed error assigning 1 QTL /SNP *changed geno slot matrix list support future RcppArmadillo changes *doubleGenome reduceGenome now work IBD tracking","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-104","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.0.4","title":"AlphaSimR 1.0.4","text":"CRAN release: 2021-09-08 *fixed errors implementation Gamma Sprinkling model","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-103","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.0.3","title":"AlphaSimR 1.0.3","text":"CRAN release: 2021-07-29 *fixed formatting error genetic maps created runMacs broke genotype extraction functions","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-102","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.0.2","title":"AlphaSimR 1.0.2","text":"CRAN release: 2021-07-28 *added h2 H2 setPhenoGCA *pullGeno pullHaplo functions now report marker names genetic map","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-101","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.0.1","title":"AlphaSimR 1.0.1","text":"CRAN release: 2021-05-14 *removed lazyData field DESCRIPTION","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-100","dir":"Changelog","previous_headings":"","what":"AlphaSimR 1.0.0","title":"AlphaSimR 1.0.0","text":"*AlphaSimR manuscript published G3 (citation added) *changed Gamma Sprinkling model crossovers, default still Gamma model *change default interference parameter (v) 2.6 consistent Kosambi mapping function (1, consistent Haldane mapping function) *new internal id (iid) allows user freely change id slot populations *runMacs2 now adjusts Ne autopolyploids *parent populations now passed finalizePop *check added throws error use discontinued “gender” argument detected *added experimental MegaPop-class","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0130","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.13.0","title":"AlphaSimR 0.13.0","text":"CRAN release: 2020-10-11 *references gender changed appropriate terms sex sexes *added misc slot populations *added finalizePop SimParam *added physical positions getSnpMap getQtlMap *can now use h2 H2 specify error variance setPheno *SimParam$setVarE now accepts matrix varE *fixed bug editGenome making multiple edits *adding merging centromere vector cChr","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0122","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.12.2","title":"AlphaSimR 0.12.2","text":"CRAN release: 2020-05-19 *GxE traits now default random sampling p-values *fixed bug restrSegSites","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0121","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.12.1","title":"AlphaSimR 0.12.1","text":"CRAN release: 2020-03-30 *fixed bug selection segSites","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0120","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.12.0","title":"AlphaSimR 0.12.0","text":"*changed output genParam match Bulmer, 1976 *nProgeny added makeCross makeCross2 *SimParam documentation now ?SimParam *non-overlapping QTL SNP now default *new interface restrSegSites SimParam *fixed subset id populations *fixed major bug newMapPop","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0111","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.11.1","title":"AlphaSimR 0.11.1","text":"CRAN release: 2020-01-13 *switched circular design balance option randCross randCross2 *added reduceGenome doubleGenome changing ploidy levels *added minSnpFreq SimParam_addSnpChip reference population *c function now merges individuals MapPop objects (chromosomes ) *cChr function new merges chromosomes MapPop objects *fixed broken SimParam_addStructuredSnpChip *removed broken pullMultipleSnpGeno pullMultipleSnpHaplo *fixed broken writePlink","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0110","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.11.0","title":"AlphaSimR 0.11.0","text":"CRAN release: 2019-10-11 *rework setEBV (breaks scripts) *genotype data now stored bits (bytes) *implemented gamma model crossover interference *added mutate function model random mutations *added vignette explaining biological model traits *GS models now handle polyploids *heterogenous error variance now optional GS models (default homogeneous error) *improved gene drop functionality pedigreeCross *added keepParents option makeDH self (indirectly extends selectFam selectWithinFam) *added RRBLUP_SCA2 *set methods “show” function applied populations *fixed bug returning first individual selecting 0 *fixed error recombination track using makeDH *fixed error causing epistatic effects mask GxE effects *fixed error pullSegSiteGeno pullSegSiteHaplo variable number sites per chromosome","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-0100","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.10.0","title":"AlphaSimR 0.10.0","text":"CRAN release: 2019-03-15 *added traits epistasis *Max number threads automatically detected *added RRBLUP_D2 *added version tracking SimParam *removed trackHaploPop (super-ceded pullIbdHaplo) *added fastRRBLUP *fixed faulty double crossover logic *fixed broken writePlink *fixed broken pullIbdHaplo *mergePops longer assumes diploidy","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-090","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.9.0","title":"AlphaSimR 0.9.0","text":"CRAN release: 2019-02-07 *added support autopolyploids *added RRBLUP_GCA2 *randCross2 can now “balance” crossing using gender *fixed recombination tracking bug createDH2 *removed bug setEBV append=TRUE","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-082","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.8.2","title":"AlphaSimR 0.8.2","text":"CRAN release: 2018-10-15 *fixed ambiguous overloading optimize.cpp","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-081","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.8.1","title":"AlphaSimR 0.8.1","text":"CRAN release: 2018-10-12 *setPheno (setPhenoGCA) passes number reps populations *fixed bug editGenomeTopQtl *fixed bug RRBLUP_D *fixed bug resetPop *fixed bug SimParam_rescaleTraits *removed unimplemented SimParam_restrSnpSites SimParam_restrQtlSites *add error message traits calcGCA","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-080","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.8.0","title":"AlphaSimR 0.8.0","text":"*added GxE traits zero environmental variance *faster trait scaling *faster calculation genetic values *dsyevr now called via arma_fortran *added OpenMP support *parallelized cross2 *parallelized runMacs *parallelized calculation genetic values *variance calculations now account inbreeding *fixes male selection selectOP","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-071","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.7.1","title":"AlphaSimR 0.7.1","text":"*add fixEff setPhenoGCA","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-070","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.7.0","title":"AlphaSimR 0.7.0","text":"*added default runMacs option return segSites *added ability specify separate male female genetic maps *pullGeno pullHaplo functions can now specify chromosomes *added RRBLUP2 special GS cases *improved speed replacing Rcpp random number generators *changed available MaCS species *GS functions now use populations directly *added pullIbdHaplo *added writePlink *fixed population sub-setting checks prevent invalid selections *fixed slow calcGCA *fixed error addTraitAG preventing multiple traits *fixed bug mergePops merging ebv *fixed bug setVarE using H2 multiple traits","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-061","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.6.1","title":"AlphaSimR 0.6.1","text":"*selectFam now handles half-sib families *selectWithinFam now handles half-sib families *Removed restriction varE=NULL setPhenoGCA","code":""},{"path":"https://gaynorr.github.io/AlphaSimR/news/index.html","id":"alphasimr-060","dir":"Changelog","previous_headings":"","what":"AlphaSimR 0.6.0","title":"AlphaSimR 0.6.0","text":"*Added NEWS file *Added selectOP model selection open pollinating plants *Added runMacs2 wrapper runMacs *Fixed error using H2 SimParam_setVarE","code":""}]
